{"version":3,"file":"static/js/152.485ec078.chunk.js","mappings":"8IAAIA,E,UACJ,SAASC,IAAiS,OAApRA,EAAWC,OAAOC,OAASD,OAAOC,OAAOC,OAAS,SAAUC,GAAU,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CAAE,IAAIG,EAASF,UAAUD,GAAI,IAAK,IAAII,KAAOD,EAAcP,OAAOS,UAAUC,eAAeC,KAAKJ,EAAQC,KAAQL,EAAOK,GAAOD,EAAOC,GAAU,CAAE,OAAOL,CAAQ,EAAUJ,EAASa,MAAMC,KAAMR,UAAY,CAElV,SAASS,EAAaC,EAAMC,GAC1B,IAAI,MACFC,EAAK,QACLC,KACGC,GACDJ,EACJ,OAAoB,gBAAoB,MAAOhB,EAAS,CACtDqB,MAAO,GACPC,OAAQ,GACRC,QAAS,YACTC,KAAM,OACNC,MAAO,6BACPC,IAAKT,EACL,kBAAmBE,GAClBC,GAAQF,EAAqB,gBAAoB,QAAS,CAC3DS,GAAIR,GACHD,GAAS,KAAMnB,IAAOA,EAAkB,gBAAoB,IAAK,CAClE4B,GAAI,6BACU,gBAAoB,IAAK,CACvCA,GAAI,eACU,gBAAoB,OAAQ,CAC1CA,GAAI,SACJC,EAAG,6CACHC,iBAAkB,GAClBC,cAAe,QACfC,eAAgB,UACD,gBAAoB,OAAQ,CAC3CJ,GAAI,WACJC,EAAG,qBACHC,iBAAkB,GAClBC,cAAe,QACfC,eAAgB,aAEpB,CACA,MAAMC,EAA0B,aAAiBjB,GAClC,G,yECnCR,MAAMkB,EAAoBC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,onDAKnBC,GAAKA,EAAEC,MAAMC,MAAMC,aAOfH,GAAKA,EAAEC,MAAMC,MAAME,qBAsBpBJ,GAAKA,EAAEK,SAAW,OAAS,WAS5BL,GAAKA,EAAEC,MAAMK,WAAWC,kBAK5BP,GAAKA,EAAEC,MAAMC,MAAMM,gBAIpBR,GAAKA,EAAEC,MAAMC,MAAME,qBAGlBJ,GAAKA,EAAEC,MAAMC,MAAME,qBAUPJ,GAAKA,EAAEC,MAAMC,MAAME,qBAWNJ,GAAKA,EAAEC,MAAMC,MAAME,qB,4GC5E3D,MAAMK,EAAkBb,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,m5EAC9BC,GAAKA,EAAEC,MAAMC,MAAMM,gBAIRR,GAAKA,EAAEC,MAAMC,MAAME,qBAS3BtB,GAASA,EAAM4B,oBAAsB,QAAU,YAKrCV,GAAKA,EAAEC,MAAMC,MAAMS,eAKnBX,GAAKA,EAAEC,MAAMC,MAAME,qBAefJ,GAAKA,EAAEC,MAAMC,MAAMU,cACZZ,GAAKA,EAAEC,MAAMC,MAAME,qBACpBJ,GAAKA,EAAEC,MAAMC,MAAME,qBAsBpBJ,GAAKA,EAAEC,MAAMC,MAAME,qBACpBJ,GAAKA,EAAEC,MAAMC,MAAME,qBA4CpCtB,GAASA,EAAMmB,MAAMC,MAAMM,gBACf1B,GAASA,EAAMmB,MAAMK,WAAWC,kBAI1CzB,GAASA,EAAMmB,MAAMC,MAAME,qBAG3BtB,GAASA,EAAMmB,MAAMC,MAAME,qBAK3BtB,GAASA,EAAMmB,MAAMC,MAAMM,gBAO9B1B,GAAUA,EAAMmB,MAAMC,MAAMW,gBAClBb,GAAKA,EAAEC,MAAMC,MAAME,qBACnBJ,GAAKA,EAAEC,MAAMC,MAAME,qBAInBJ,GAAKA,EAAEC,MAAMK,WAAWC,kBAIjCzB,GAASA,EAAMmB,MAAMC,MAAMS,eAc7BG,EAAuBlB,EAAAA,GAAOC,IAAGkB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,k7BA2BpBC,GAAKA,EAAEC,MAAMK,WAAWC,kBAIxBP,GAAKA,EAAEC,MAAMK,WAAWC,kBAGzBP,GAAKA,EAAEC,MAAMC,MAAME,qB,uBCzLrC,MAAMY,EAAatC,IAAe,IAAd,KAAEuC,GAAMvC,EACjC,MAAOwC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IAAIC,OAGnDC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAaC,aAAY,KAC7BL,EAAe,IAAIE,KAAO,GACzB,KAEH,MAAO,IAAMI,cAAcF,EAAW,GACrC,IAuBH,OACEG,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SArB2BC,KAC3B,MAAMC,EAAkB,IAAIT,KAC1BH,EAAYa,UAA8C,IAAlCb,EAAYc,qBAOtC,OAJmB,IAAIX,KACrBS,EAAeC,UAA6B,GAAjBF,EAAsB,GAAK,KAGtCI,eAAe,QAAS,CACxCC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,UACRC,YAAQC,GACR,EAMCC,CAAoBxB,EAAKyB,WACzB,E,kCChCA,MAAMC,EAAWC,EAAAA,MAAWlE,IAAe,IAAd,KAAEuC,GAAMvC,EAC1C,MAAOmE,EAAMC,IAAW1B,EAAAA,EAAAA,UAAS,MAC3B2B,GAAUC,EAAAA,EAAAA,QAAO,IAAI3B,MACrB4B,GAAWC,EAAAA,EAAAA,MAGXC,GAAeC,EAAAA,EAAAA,UAAQ,IACpBnC,EAAKoC,SAAW,IAAIhC,KAAKJ,EAAKoC,UAAY,MAChD,CAACpC,EAAKoC,WAGHC,EAAYT,GAAQA,EAAOE,EAAQQ,QACnCC,EAAWX,EAAOA,EAAOE,EAAQQ,QAAU,EAC3CE,GAAeH,GAAaE,GAAY,MACxCE,EAAUb,GAAQE,EAAQQ,QAAQI,iBAAmBd,EAAKc,eAC1DC,EAAgBf,GAAQA,EAAOE,EAAQQ,QAAU,QAAU,KAC3DM,EAAgBH,EAAUX,EAAQQ,QAAQO,eAAeC,MAAM,EAAG,GAAK,MAG7EzC,EAAAA,EAAAA,YAAU,KACJL,EAAKoC,SACPP,EAAQK,GAERL,EAAQ,KACV,GACC,CAAC7B,EAAKoC,SAAUF,IAkBnB,OACEzB,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBACZC,MAAO,CACLC,gBAAiBZ,EACb,YACAG,EACA,UACA,eACJ7B,UAEFF,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,gBAAepC,UAC5BF,EAAAA,EAAAA,KAACyC,EAAAA,EAAS,CACR,sBACAC,MAAOvB,GAAc,GACrBwB,SAAUC,IAAA,IAAEzB,GAAKyB,EAAA,OAAKxB,EAAQD,EAAK,EACnC0B,QAAS,CACPC,WAAY,aACZC,QAASb,EACTc,QAASb,EACTc,aAAa,EACb,OAAU,CACR,eAAkB,IAGtBC,YAAY,oBACZC,QAxCmBC,KACzB,GAAKjC,KAAUM,GAAgB,OAAWN,IAASE,EAAQQ,QACzD,GAAID,EACFR,EAAQ,UACH,CACL,MAAMiC,EAAclC,EAAKmC,cAAcjB,MAAM,EAAG,IAChDd,GAASgC,EAAAA,EAAAA,IAAc,CACrB5F,GAAI4B,EAAKiE,IACTC,aAAcJ,IAElB,CACF,OAgCK,I,oBC5EF,MAAMK,EAAiBxF,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,utEAQvBC,GAAKA,EAAEC,MAAMC,MAAMM,gBAYlBR,GAAKA,EAAEC,MAAMC,MAAME,qBAiBrBtB,GAASA,EAAMuG,YAAc,OAAS,SAI1BrF,GAAKA,EAAEC,MAAMC,MAAMoF,cAQftF,GAAKA,EAAEC,MAAMC,MAAMU,cAGzBZ,GAAKA,EAAEC,MAAMK,WAAWC,kBASlBP,GAAKA,EAAEC,MAAMC,MAAMS,eAOlC7B,GAASA,EAAMuG,YAAc,OAAS,SAWtCvG,GAASA,EAAMuG,YAAc,OAAS,SAYvBrF,GAAKA,EAAEC,MAAMK,WAAWC,kBACnCP,GAAKA,EAAEC,MAAMC,MAAMM,gBAGfR,GAAKA,EAAEC,MAAMC,MAAME,qBAe/BmF,EAAgB3F,EAAAA,GAAOC,IAAGkB,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,4+EAQtBjB,GACDA,EAAM0G,YAAc1G,EAAM2G,WAAa3G,EAAM4G,QACtC5G,EAAMmB,MAAMC,MAAMM,cAElB1B,EAAMmB,MAAMC,MAAMS,eAcvBX,GAAKA,EAAEC,MAAMC,MAAME,qBAmBTJ,GAAKA,EAAEC,MAAMC,MAAMoF,cACftF,GAAKA,EAAEC,MAAMC,MAAMU,cAIzBZ,GAAKA,EAAEC,MAAMK,WAAWC,kBAWlBP,GAAKA,EAAEC,MAAMC,MAAME,qBAI9BJ,GAAKA,EAAEC,MAAMC,MAAMM,gBAIfR,GAAKA,EAAEC,MAAMC,MAAMS,eAKRX,GAAKA,EAAEC,MAAMC,MAAMM,gBAKjC1B,GAAUA,EAAMmB,MAAMC,MAAMW,gBACjBb,GAAMA,EAAEC,MAAMC,MAAME,qBAIpBJ,GAAMA,EAAEC,MAAMC,MAAME,qBAIrBJ,GAAKA,EAAEC,MAAMK,WAAWC,kBAG9BzB,GAAUA,EAAMmB,MAAMC,MAAMS,eAkCzCgF,EAA4B/F,EAAAA,GAAOC,IAAG+F,IAAAA,GAAA7F,EAAAA,EAAAA,GAAA,w2EAQlCC,GAAKA,EAAEC,MAAMC,MAAMM,gBAKV1B,GAASA,EAAM+G,gBAAkB,SAQzC7F,GAAKA,EAAEC,MAAMC,MAAME,qBAiBrBtB,GAASA,EAAMgH,qBAAuB,OAAS,SAInC9F,GAAKA,EAAEC,MAAMC,MAAMoF,cAOftF,GAAKA,EAAEC,MAAMC,MAAMU,cAGzBZ,GAAKA,EAAEC,MAAMK,WAAWC,kBASlBP,GAAKA,EAAEC,MAAMC,MAAMS,eA8BnBX,GAAKA,EAAEC,MAAMK,WAAWC,kBACnCP,GAAKA,EAAEC,MAAMC,MAAMM,gBAIfR,GAAKA,EAAEC,MAAMC,MAAME,qBAS3BJ,GAAKA,EAAEC,MAAMC,MAAME,qB,cC/U7B,MAAM2F,EAASnD,EAAAA,MAAWlE,IAQ1B,IAR2B,MAC9BsH,EAAK,MACLC,EAAK,KACLhF,EAAI,OACJiF,EAAM,QACNC,EAAO,UACPC,EAAS,aACTC,GACH3H,EACG,MAAO4H,EAAUC,IAAanF,EAAAA,EAAAA,WAAS,IAChCoF,EAAYC,IAAiBrF,EAAAA,EAAAA,UAAS,IAAIsF,MAC1CC,EAAgBC,IAAqBxF,EAAAA,EAAAA,UAAS,MAC/CyF,GAAa7D,EAAAA,EAAAA,QAAO,IAAI0D,KACxBzD,GAAWC,EAAAA,EAAAA,OAGjB5B,EAAAA,EAAAA,YAAU,KAEFiF,KADDL,GAAqB,KAAXA,GAIb,GACF,CAACA,IAGH,MA0BMY,GAAiBC,EAAAA,EAAAA,cAAYC,IACb,WAAdA,EAAM7I,KACNsI,EAAc,IAAIC,IACtB,GACF,IAGIO,GAAwBF,EAAAA,EAAAA,cAAYC,IACtC,MAAME,EAAe,IAAIR,IAAIF,GAC7B,IAAIW,GAAe,EAEnBN,EAAWtD,QAAQ6D,SAAQ,CAAChI,EAAKiI,KACzBjI,IAAQA,EAAIkI,SAASN,EAAMlJ,SAAW0I,EAAWe,IAAIF,KACrDH,EAAaM,IAAIH,GAAQ,GACzBF,GAAe,EACnB,IAGAA,GACAV,EAAcS,EAClB,GACD,CAACV,KAGJlF,EAAAA,EAAAA,YAAU,KACNmG,SAASC,iBAAiB,UAAWZ,GACrCW,SAASC,iBAAiB,QAAST,GAE5B,KACHQ,SAASE,oBAAoB,UAAWb,GACxCW,SAASE,oBAAoB,QAASV,EAAsB,IAEjE,CAACA,EAAuBH,IAkB3B,OACIpF,EAAAA,EAAAA,KAAC0D,EAAc,CAAChG,IAAKwI,IACbA,GACAf,EAAWtD,QAAQiE,IAAIvG,EAAKiE,IAAK0C,EACrC,EACFhG,SACG+E,IAAmB1F,EAAKiE,KACrBxD,EAAAA,EAAAA,KAACmG,EAAAA,GAAa,KAEdC,EAAAA,EAAAA,MAAAnG,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAQsC,UAAU,aAAa+D,KAAK,SAChCC,QAASA,KAAMC,OAvFLZ,EAuF0BpG,EAAKiE,SAtFzDuB,GAAcyB,IACZ,MAAMC,EAAS,IAAIzB,IAAIwB,GAEvB,OADAC,EAAOX,IAAIH,GAASc,EAAOZ,IAAIF,IACxBc,CAAM,IAJWd,KAuFoC,EAAAzF,SAE7C0E,EAAWrF,EAAKiF,OAAS,SAE9BxE,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CAACpE,UAAS,aAAAqE,QAtELhB,EAsE0CpG,EAAKiE,IArEnEsB,EAAWe,IAAIF,GAAU,iBAAmB,QAsEvC3F,EAAAA,EAAAA,KAAA,MAAIsC,UAAS,eAAAqE,OAnFAC,EAACjB,EAAQpB,KAClC,MAAMsC,EAAatC,EAAMhI,OACzB,OAAI+H,EAAQ,GACLA,EAAQuC,EAAa,EACb/B,EAAWe,IAAIF,GAAU,+BAAiC,QADrE,EAIOb,EAAWe,IAAIF,GAAU,sBAAwB,EAC5D,EA2E0CiB,CAAqBrH,EAAKiE,IAAKe,IAASrE,SACjEsE,EAAOsC,KAAI,CAACtC,EAAQF,KACjBtE,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,cAAapC,UACvBF,EAAAA,EAAAA,KAAA,KAAGsC,UAAU,iBACTgE,QAASA,IAnCnBS,KAClB,GAAItC,GAAWC,GAAaC,EAAc,CACtC,MAAMqC,EAAa,CACfrJ,GAAI4B,EAAKiE,IACTyD,WAAYF,GAEhB7B,EAAkB3F,EAAKiE,KACvBjC,GAAS2F,EAAAA,EAAAA,IAAYF,IAAaG,SAAQ,KACtCjC,EAAkB,KAAK,IAE3BH,EAAc,IAAIC,IACtB,GAwB2CoC,CAAa5C,GAAQtE,SACtCsE,KAH2BF,YAzE1BqB,KAmFV,IChIZ0B,EAAWnG,EAAAA,MAAWlE,IAQ5B,IAR6B,MAChCsH,EAAK,MACLC,EAAK,KACLhF,EAAI,SACJyB,EAAQ,QACRyD,EAAO,UACPC,EAAS,aACTC,GACH3H,EACG,MAAOsK,EAAYC,IAAe7H,EAAAA,EAAAA,WAAS,IACpC8H,EAAcC,IAAmB/H,EAAAA,EAAAA,UAAS,IAAIsF,MAC9CC,EAAgBC,IAAqBxF,EAAAA,EAAAA,UAAS,MAC/CgI,GAAepG,EAAAA,EAAAA,QAAO,IAAI0D,KAC1BzD,GAAWC,EAAAA,EAAAA,OAGjB5B,EAAAA,EAAAA,YAAU,KAEF2H,KADDvG,GAAyB,KAAbA,GAIf,GACF,CAACA,IAGH,MA0BMoE,GAAiBC,EAAAA,EAAAA,cAAYC,IACb,WAAdA,EAAM7I,KACNgL,EAAgB,IAAIzC,IACxB,GACF,IAGIO,GAAwBF,EAAAA,EAAAA,cAAYC,IACtC,MAAME,EAAe,IAAIR,IAAIwC,GAC7B,IAAI/B,GAAe,EAEnBiC,EAAa7F,QAAQ6D,SAAQ,CAAChI,EAAKiI,KAC3BjI,IAAQA,EAAIkI,SAASN,EAAMlJ,SAAWoL,EAAa3B,IAAIF,KACvDH,EAAaM,IAAIH,GAAQ,GACzBF,GAAe,EACnB,IAGAA,GACAgC,EAAgBjC,EACpB,GACD,CAACgC,KAGJ5H,EAAAA,EAAAA,YAAU,KACNmG,SAASC,iBAAiB,UAAWZ,GACrCW,SAASC,iBAAiB,QAAST,GAE5B,KACHQ,SAASE,oBAAoB,UAAWb,GACxCW,SAASE,oBAAoB,QAASV,EAAsB,IAEjE,CAACA,EAAuBH,IAkB3B,OACIpF,EAAAA,EAAAA,KAAC0D,EAAc,CAAChG,IAAKwI,IACbA,GACAwB,EAAa7F,QAAQiE,IAAIvG,EAAKiE,IAAK0C,EACvC,EACAvC,YAAa2D,EAAWpH,SAEvB+E,IAAmB1F,EAAKiE,KACrBxD,EAAAA,EAAAA,KAACmG,EAAAA,GAAa,KAEdC,EAAAA,EAAAA,MAAAnG,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAQsC,UAAU,aAAa+D,KAAK,SAChCC,QAASA,KAAMqB,OAxFHhC,EAwF0BpG,EAAKiE,SAvF3DiE,GAAgBjB,IACd,MAAMC,EAAS,IAAIzB,IAAIwB,GAEvB,OADAC,EAAOX,IAAIH,GAASc,EAAOZ,IAAIF,IACxBc,CAAM,IAJad,KAwFoC,EAAAzF,SAE/CoH,EAAa/H,EAAKyB,SAAW,SAElChB,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CAACpE,UAAS,aAAAqE,QAvEHhB,EAuE0CpG,EAAKiE,IAtErEgE,EAAa3B,IAAIF,GAAU,iBAAmB,QAuEzC3F,EAAAA,EAAAA,KAAA,MAAIsC,UAAS,eAAAqE,OApFEiB,EAACjC,EAAQpB,KACpC,MAAMsC,EAAatC,EAAMhI,OACzB,OAAI+H,EAAQ,GACLA,EAAQuC,EAAa,EACbW,EAAa3B,IAAIF,GAAU,+BAAiC,QADvE,EAIO6B,EAAa3B,IAAIF,GAAU,sBAAwB,EAC9D,EA4E0CiC,CAAuBrI,EAAKiE,IAAKe,IAASrE,SACnEc,EAAS8F,KAAI,CAACe,EAAMvD,KACjBtE,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,cAAapC,UACvBF,EAAAA,EAAAA,KAAA,KAAGsC,UAAU,iBACTgE,QAASA,IApCjBtF,KACpB,GAAIyD,GAAWC,GAAaC,EAAc,CACtC,MAAMmD,EAAe,CACjBnK,GAAI4B,EAAKiE,IACTuE,aAAc/G,GAElBkE,EAAkB3F,EAAKiE,KACvBjC,GAASyG,EAAAA,EAAAA,IAAcF,IAAeX,SAAQ,KAC1CjC,EAAkB,KAAK,IAE3BuC,EAAgB,IAAIzC,IACxB,GAyB2CiD,CAAeJ,GAAM3H,SACtC2H,KAH2BvD,YA1ExBqB,KAmFZ,ICjIZuC,EAAUlL,IAA6D,IAA5D,MAACsH,EAAK,MAAEC,EAAK,KAAEhF,EAAI,QAAEkF,EAAO,UAAEC,EAAS,aAAEC,GAAa3H,EAC1E,MAAOmL,EAAWC,IAAc1I,EAAAA,EAAAA,WAAS,IAClC2I,EAAaC,IAAkB5I,EAAAA,EAAAA,UAAS,IAAIsF,MAC5CuD,EAAcC,IAAmB9I,EAAAA,EAAAA,UAAS,KAC1C+I,EAAiBC,IAAoBhJ,EAAAA,EAAAA,WAAS,IAC9CuF,EAAgBC,IAAqBxF,EAAAA,EAAAA,UAAS,MAC/CiJ,GAAcrH,EAAAA,EAAAA,QAAO,IAAI0D,KACzBzD,GAAWC,EAAAA,EAAAA,OAGjB5B,EAAAA,EAAAA,YAAU,KACHL,EAAKqJ,SAA4B,KAAjBrJ,EAAKqJ,QACpBR,GAAW,GAEXA,GAAW,EACf,GACF,CAAC7I,EAAKqJ,UAGR,MA0BMxD,GAAiBC,EAAAA,EAAAA,cAAYC,IACb,WAAdA,EAAM7I,MACN6L,EAAe,IAAItD,KACnBwD,EAAgB,IAChBE,GAAiB,GACrB,GACF,IAGInD,GAAwBF,EAAAA,EAAAA,cAAYC,IACtC,MAAME,EAAe,IAAIR,IAAIqD,GAC7B,IAAI5C,GAAe,EAEnBkD,EAAY9G,QAAQ6D,SAAQ,CAAChI,EAAKiI,KAC1BjI,IAAQA,EAAIkI,SAASN,EAAMlJ,SAAWiM,EAAYxC,IAAIF,KACtDH,EAAaM,IAAIH,GAAQ,GACzBF,GAAe,EACnB,IAGAA,GACA6C,EAAe9C,EACnB,GACD,CAAC6C,KAGJzI,EAAAA,EAAAA,YAAU,KACNmG,SAASC,iBAAiB,UAAWZ,GACrCW,SAASC,iBAAiB,QAAST,GAE5B,KACHQ,SAASE,oBAAoB,UAAWb,GACxCW,SAASE,oBAAoB,QAASV,EAAsB,IAEjE,CAACA,EAAuBH,IAwC3B,OACEpF,EAAAA,EAAAA,KAAC6D,EAAa,CAACnG,IAAKwI,IACdA,GACAyC,EAAY9G,QAAQiE,IAAIvG,EAAKiE,IAAK0C,EACtC,EACApC,WAAYqE,EAAUjI,SAErB+E,IAAmB1F,EAAKiE,KACrBxD,EAAAA,EAAAA,KAACmG,EAAAA,GAAa,KAEdC,EAAAA,EAAAA,MAAAnG,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAQsC,UAAU,WAAW+D,KAAK,SAC9BC,QAASA,KAAMuC,OAhHAlD,EAgHsBpG,EAAKiE,IA/GtD8E,GAAe9B,IACb,MAAMC,EAAS,IAAIzB,IAAIwB,GAEvB,OADAC,EAAOX,IAAIH,GAASc,EAAOZ,IAAIF,IACxBc,CAAM,IAEf+B,EAAgB,SAChBE,GAAiB,GAPU/C,KAgHgC,EAAAzF,SAE9CiI,EAAY5I,EAAKqJ,QAAU,mBAEhC5I,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CAACpE,UAAS,cAAAqE,QA/FAhB,EA+FuCpG,EAAKiE,IA9FjE6E,EAAYxC,IAAIF,GAAU,kBAAoB,QA+F7CS,EAAAA,EAAAA,MAAA,QAAM9D,UAAS,cAAAqE,OA1GGmC,EAACnD,EAAQpB,KACnC,MAAMsC,EAAatC,EAAMhI,OACzB,OAAK+H,EAAQ,IAAQA,EAAQuC,EAAa,EAC/BwB,EAAYxC,IAAIF,GAAU,8BAAgC,GAE1D0C,EAAYxC,IAAIF,GAAU,qBAAuB,EAC5D,EAoGuCmD,CAAsBvJ,EAAKiE,IAAKe,IAAUwE,SAAWC,GAAMA,EAAEC,iBAAiB/I,SAAA,EACzGF,EAAAA,EAAAA,KAAA,SAAOkJ,QAAQ,UAAShJ,UACpBF,EAAAA,EAAAA,KAAA,SAAOqG,KAAK,OACR3D,MAAO6F,EACP5F,SA1DMqG,IAC1BR,EAAgBQ,EAAE5M,OAAOsG,OACrBsG,EAAE5M,OAAOsG,MAAMyG,gBAAkB5J,EAAKqJ,QAAQO,eAAsC,KAAnBH,EAAE5M,OAAOsG,MAC1EgG,GAAiB,GAEjBA,GAAiB,EACrB,EAqDoB/K,GAAG,UACHyL,KAAK,UACLlG,YAAY,gBACZmG,UAAQ,OAGhBrJ,EAAAA,EAAAA,KAAA,UAAQqG,KAAK,SACT/D,UAAU,gBACVgH,UAAWb,EACXnC,QA1DKiD,KACrB,GAAI9E,GAAWC,GAAaC,EAAc,CACtC,MAAM6E,EAAwBjB,EAC7BkB,MAAM,KACN3C,KAAI4C,GACGA,IAASA,EAAKC,cACPD,EAEJA,EAAKE,OAAO,GAAGD,cAAgBD,EAAKrH,MAAM,GAAG8G,gBAEvDU,KAAK,KAEAC,EAAkB,CACpBnM,GAAI4B,EAAKiE,IACTuG,YAAaP,GAEjBtE,EAAkB3F,EAAKiE,KACvBjC,GAASyI,EAAAA,EAAAA,IAAiBF,IAAkB3C,SAAQ,KAChDjC,EAAkB,KAAK,IAE3BwD,GAAiB,GACjBF,EAAgB,IAChBF,EAAe,IAAItD,IACvB,GAmC0C9E,SACzB,iBA/GWyF,KAoHd,EC5JTsE,EAASjN,IAA6D,IAA5D,MAACsH,EAAK,MAAEC,EAAK,KAAEhF,EAAI,QAAEkF,EAAO,UAAEC,EAAS,aAAEC,GAAa3H,EACzE,MAAOkN,EAAUC,IAAazK,EAAAA,EAAAA,WAAS,IAChC0K,EAAYC,IAAiB3K,EAAAA,EAAAA,UAAS,IAAIsF,MAC1CsF,EAAaC,IAAkB7K,EAAAA,EAAAA,UAAS,KACxC8K,EAAgBC,IAAmB/K,EAAAA,EAAAA,WAAS,IAC5CuF,EAAgBC,IAAqBxF,EAAAA,EAAAA,UAAS,MAC/CgL,GAAapJ,EAAAA,EAAAA,QAAO,IAAI0D,KACxBzD,GAAWC,EAAAA,EAAAA,OAGjB5B,EAAAA,EAAAA,YAAU,KACHL,EAAKoL,QAA0B,KAAhBpL,EAAKoL,OACnBR,GAAU,GAEVA,GAAU,EACd,GACF,CAAC5K,EAAKoL,SAGR,MA0BMvF,GAAiBC,EAAAA,EAAAA,cAAYC,IACb,WAAdA,EAAM7I,MACN4N,EAAc,IAAIrF,KAClBuF,EAAe,IACfE,GAAgB,GACpB,GACF,IAGIlF,GAAwBF,EAAAA,EAAAA,cAAYC,IACtC,MAAME,EAAe,IAAIR,IAAIoF,GAC7B,IAAI3E,GAAe,EAEnBiF,EAAW7I,QAAQ6D,SAAQ,CAAChI,EAAKiI,KACzBjI,IAAQA,EAAIkI,SAASN,EAAMlJ,SAAWgO,EAAWvE,IAAIF,KACrDH,EAAaM,IAAIH,GAAQ,GACzBF,GAAe,EACnB,IAGAA,GACA4E,EAAc7E,EAClB,GACD,CAAC4E,KAGJxK,EAAAA,EAAAA,YAAU,KACNmG,SAASC,iBAAiB,UAAWZ,GACrCW,SAASC,iBAAiB,QAAST,GAE5B,KACHQ,SAASE,oBAAoB,UAAWb,GACxCW,SAASE,oBAAoB,QAASV,EAAsB,IAEjE,CAACA,EAAuBH,IAmC3B,OACIpF,EAAAA,EAAAA,KAAC6D,EAAa,CAACnG,IAAKwI,IACZA,GACAwE,EAAW7I,QAAQiE,IAAIvG,EAAKiE,IAAK0C,EACrC,EACAnC,UAAWmG,EAAShK,SAEnB+E,IAAmB1F,EAAKiE,KACrBxD,EAAAA,EAAAA,KAACmG,EAAAA,GAAa,KAEdC,EAAAA,EAAAA,MAAAnG,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAQsC,UAAU,WAAW+D,KAAK,SAC9BC,QAASA,KAAMsE,OA3GLjF,EA2G0BpG,EAAKiE,IA1GzD6G,GAAc7D,IACZ,MAAMC,EAAS,IAAIzB,IAAIwB,GAEvB,OADAC,EAAOX,IAAIH,GAASc,EAAOZ,IAAIF,IACxBc,CAAM,IAEf8D,EAAe,SACfE,GAAgB,GAPU9E,KA2GoC,EAAAzF,SAE7CgK,EAAW3K,EAAKoL,OAAS,kBAE9B3K,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CAACpE,UAAS,cAAAqE,QA1FLhB,EA0F2CpG,EAAKiE,IAzFpE4G,EAAWvE,IAAIF,GAAU,kBAAoB,QA0FxCS,EAAAA,EAAAA,MAAA,QAAM9D,UAAS,cAAAqE,OArGFkE,EAAClF,EAAQpB,KAClC,MAAMsC,EAAatC,EAAMhI,OACzB,OAAK+H,EAAQ,IAAQA,EAAQuC,EAAa,EAC/BuD,EAAWvE,IAAIF,GAAU,8BAAgC,GAEzDyE,EAAWvE,IAAIF,GAAU,qBAAuB,EAC3D,EA+F2CkF,CAAqBtL,EAAKiE,IAAKe,IAAUwE,SAAWC,GAAMA,EAAEC,iBAAiB/I,SAAA,EACxGF,EAAAA,EAAAA,KAAA,SAAOkJ,QAAQ,SAAQhJ,UACnBF,EAAAA,EAAAA,KAAA,SAAOqG,KAAK,OACR3D,MAAO4H,EACP3H,SArDCqG,IACzBuB,EAAevB,EAAE5M,OAAOsG,OACpBsG,EAAE5M,OAAOsG,MAAMyG,gBAAkB5J,EAAKqJ,QAAQO,eAAsC,KAAnBH,EAAE5M,OAAOsG,MAC1E+H,GAAgB,GAEhBA,GAAgB,EACpB,EAgDwB9M,GAAG,SACHyL,KAAK,SACLlG,YAAY,eACZmG,UAAQ,OAGhBrJ,EAAAA,EAAAA,KAAA,UAAQqG,KAAK,SACT/D,UAAU,gBACVgH,UAAWkB,EACXlE,QArDAwE,KACpB,GAAIrG,GAAWC,GAAaC,EAAc,CACtC,MAAMoG,EAAuBT,EAC5Bb,MAAM,KACN3C,KAAI4C,GAAQA,EAAKE,OAAO,GAAGD,cAAgBD,EAAKrH,MAAM,GAAG8G,gBACzDU,KAAK,KAEAmB,EAAiB,CACnBrN,GAAI4B,EAAKiE,IACTyH,WAAYF,GAEhB7F,EAAkB3F,EAAKiE,KACvBjC,GAAS2J,EAAAA,EAAAA,IAAgBF,IAAiB7D,SAAQ,KAC9CjC,EAAkB,KAAK,IAE3BuF,GAAgB,GAChBF,EAAe,IACfF,EAAc,IAAIrF,IACtB,GAmC6C9E,SACxB,iBA1GMyF,KA+GX,ECvJXwF,EAAOnO,IAA6D,IAA5D,MAACsH,EAAK,MAAEC,EAAK,KAAEhF,EAAI,QAAEkF,EAAO,UAAEC,EAAS,aAAEC,GAAa3H,EACvE,MAAOoO,EAAQC,IAAW3L,EAAAA,EAAAA,WAAS,IAC5B4L,EAAUC,IAAe7L,EAAAA,EAAAA,UAAS,IAAIsF,MACtCwG,EAAWC,IAAgB/L,EAAAA,EAAAA,UAAS,KACpCgM,EAAcC,IAAiBjM,EAAAA,EAAAA,WAAS,IACxCuF,EAAgBC,IAAqBxF,EAAAA,EAAAA,UAAS,MAC/CkM,GAAWtK,EAAAA,EAAAA,QAAO,IAAI0D,KACtBzD,GAAWC,EAAAA,EAAAA,OAGjB5B,EAAAA,EAAAA,YAAU,KACHL,EAAKsM,MAAsB,KAAdtM,EAAKsM,KACjBR,GAAQ,GAEVA,GAAQ,EACV,GACF,CAAC9L,EAAKsM,OAGR,MA0BMzG,GAAiBC,EAAAA,EAAAA,cAAYC,IACb,WAAdA,EAAM7I,MACN8O,EAAY,IAAIvG,KAChByG,EAAa,IACbE,GAAc,GAClB,GACF,IAGIpG,GAAwBF,EAAAA,EAAAA,cAAYC,IACtC,MAAME,EAAe,IAAIR,IAAIsG,GAC7B,IAAI7F,GAAe,EAEnBmG,EAAS/J,QAAQ6D,SAAQ,CAAChI,EAAKiI,KACvBjI,IAAQA,EAAIkI,SAASN,EAAMlJ,SAAWkP,EAASzF,IAAIF,KACnDH,EAAaM,IAAIH,GAAQ,GACzBF,GAAe,EACnB,IAGAA,GACA8F,EAAY/F,EAChB,GACD,CAAC8F,KAGJ1L,EAAAA,EAAAA,YAAU,KACNmG,SAASC,iBAAiB,UAAWZ,GACrCW,SAASC,iBAAiB,QAAST,GAE5B,KACHQ,SAASE,oBAAoB,UAAWb,GACxCW,SAASE,oBAAoB,QAASV,EAAsB,IAEjE,CAACA,EAAuBH,IAmC3B,OACIpF,EAAAA,EAAAA,KAAC6D,EAAa,CAACnG,IAAKwI,IACZA,GACA0F,EAAS/J,QAAQiE,IAAIvG,EAAKiE,IAAK0C,EACnC,EACAlC,QAASoH,EAAOlL,SAEf+E,IAAmB1F,EAAKiE,KACrBxD,EAAAA,EAAAA,KAACmG,EAAAA,GAAa,KAEdC,EAAAA,EAAAA,MAAAnG,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAQsC,UAAU,WAAW+D,KAAK,SAC9BC,QAASA,KAAMwF,OA3GPnG,EA2G0BpG,EAAKiE,IA1GvD+H,GAAY/E,IACV,MAAMC,EAAS,IAAIzB,IAAIwB,GAEvB,OADAC,EAAOX,IAAIH,GAASc,EAAOZ,IAAIF,IACxBc,CAAM,IAEfgF,EAAa,SACbE,GAAc,GAPUhG,KA2GoC,EAAAzF,SAE3CkL,EAAS7L,EAAKsM,KAAO,gBAE1B7L,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CAACpE,UAAS,cAAAqE,QA1FPhB,EA0F2CpG,EAAKiE,IAzFlE8H,EAASzF,IAAIF,GAAU,kBAAoB,QA0FtCS,EAAAA,EAAAA,MAAA,QAAM9D,UAAS,cAAAqE,OArGJoF,EAACpG,EAAQpB,KAChC,MAAMsC,EAAatC,EAAMhI,OACzB,OAAK+H,EAAQ,IAAQA,EAAQuC,EAAa,EAC/ByE,EAASzF,IAAIF,GAAU,8BAAgC,GAEvD2F,EAASzF,IAAIF,GAAU,qBAAuB,EACzD,EA+F2CoG,CAAmBxM,EAAKiE,IAAKe,IAAUwE,SAAWC,GAAMA,EAAEC,iBAAiB/I,SAAA,EACtGF,EAAAA,EAAAA,KAAA,SAAOkJ,QAAQ,OAAMhJ,UACjBF,EAAAA,EAAAA,KAAA,SAAOqG,KAAK,OACR3D,MAAO8I,EACP7I,SArDDqG,IACvByC,EAAazC,EAAE5M,OAAOsG,OAClBsG,EAAE5M,OAAOsG,MAAMyG,gBAAkB5J,EAAKqJ,QAAQO,eAAsC,KAAnBH,EAAE5M,OAAOsG,MAC1EiJ,GAAc,GAEdA,GAAc,EAClB,EAgDwBhO,GAAG,OACHyL,KAAK,OACLlG,YAAY,aACZmG,UAAQ,OAGhBrJ,EAAAA,EAAAA,KAAA,UAAQqG,KAAK,SACT/D,UAAU,gBACVgH,UAAWoC,EACXpF,QArDF0F,KAClB,GAAIvH,GAAWC,GAAaC,EAAc,CACtC,MAAMsH,EAAqBT,EAC1B/B,MAAM,KACN3C,KAAI4C,GAAQA,EAAKE,OAAO,GAAGD,cAAgBD,EAAKrH,MAAM,GAAG8G,gBACzDU,KAAK,KAEAqC,EAAe,CACjBvO,GAAI4B,EAAKiE,IACT2I,SAAUF,GAEd/G,EAAkB3F,EAAKiE,KACvBjC,GAAS6K,EAAAA,EAAAA,IAAcF,IAAe/E,SAAQ,KAC1CjC,EAAkB,KAAK,IAE3ByG,GAAc,GACdF,EAAa,IACbF,EAAY,IAAIvG,IACpB,GAmC2C9E,SACtB,iBA1GIyF,KA+GT,ECvJX0G,EAA6BrP,IAMnC,IANoC,wBACvCsP,EAAuB,MACvB/H,EAAK,KACLhF,EAAI,MACJ+E,EAAK,UACLI,GACH1H,EACG,MAAOuP,EAAYC,IAAiB9M,EAAAA,EAAAA,WAAS,IACtC+M,EAAeC,IAAkBhN,EAAAA,EAAAA,WAAS,IAC1CiN,EAAaC,IAAkBlN,EAAAA,EAAAA,UAAS,IAAIsF,MAC5CC,EAAgBC,IAAqBxF,EAAAA,EAAAA,UAAS,MAC/CmN,GAAcvL,EAAAA,EAAAA,QAAO,IAAI0D,KACzBzD,GAAWC,EAAAA,EAAAA,OAGjB5B,EAAAA,EAAAA,YAAU,KACN,MAAM2M,EAAahN,EAAKuN,aAClBC,EAAcxN,EAAKwN,YACtBR,IAAeA,EAAWnD,MAAQmD,EAAWS,OAC5CR,GAAc,GAEdA,GAAc,GAGdE,IADAK,EAIJ,GACF,CAACxN,EAAKuN,aAAcvN,EAAKwN,cAG3B,MA0BM3H,GAAiBC,EAAAA,EAAAA,cAAYC,IACb,WAAdA,EAAM7I,KACNmQ,EAAe,IAAI5H,IACvB,GACF,IAGIO,GAAwBF,EAAAA,EAAAA,cAAYC,IACtC,MAAME,EAAe,IAAIR,IAAI2H,GAC7B,IAAIlH,GAAe,EAEnBoH,EAAYhL,QAAQ6D,SAAQ,CAAChI,EAAKiI,KAC1BjI,IAAQA,EAAIkI,SAASN,EAAMlJ,SAAWuQ,EAAY9G,IAAIF,KACtDH,EAAaM,IAAIH,GAAQ,GACzBF,GAAe,EACnB,IAGAA,GACAmH,EAAepH,EACnB,GACD,CAACmH,KAGJ/M,EAAAA,EAAAA,YAAU,KACNmG,SAASC,iBAAiB,UAAWZ,GACrCW,SAASC,iBAAiB,QAAST,GAE5B,KACHQ,SAASE,oBAAoB,UAAWb,GACxCW,SAASE,oBAAoB,QAASV,EAAsB,IAEjE,CAACA,EAAuBH,IAG3B,MAAM6H,EAAkBC,GACbZ,EACNa,QAAOC,GAAQA,EAAK5J,MAAQ0J,IAC5BpG,KAAI,CAACsG,EAAM9I,KACRtE,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,YAAWpC,UACrBkG,EAAAA,EAAAA,MAAA,KAAG9D,UAAU,iBACTgE,QAASA,IAAM+G,EAAmBD,GAAMlN,SAAA,CAC3C,OAAKkN,EAAKE,aAHgBhJ,KAUjC+I,EAAsBD,IACrB1I,IACM+H,GAAkBF,IACnBrH,EAAkB3F,EAAKiE,KACvBjC,GAASgM,EAAAA,EAAAA,IAAW,CAChB5H,OAAQpG,EAAKiE,IACbgK,KAAM,CACFV,aAAcM,EAAK5J,QAEvB2D,SAAQ,KACRjC,EAAkB,KAAK,IAE3B0H,EAAe,IAAI5H,OAElByH,GAAiBF,IAClBrH,EAAkB3F,EAAKiE,KACvBjC,GAASkM,EAAAA,EAAAA,IAAa,CAClB9H,OAAQpG,EAAKiE,IACbgK,KAAM,CACFV,aAAcM,EAAK5J,QAEvB2D,SAAQ,KACRjC,EAAkB,KAAK,IAE3B0H,EAAe,IAAI5H,MAE3B,EAIJ,OACIhF,EAAAA,EAAAA,KAACiE,EAAyB,CAACvG,IAAKwI,IACxBA,GACA2G,EAAYhL,QAAQiE,IAAIvG,EAAKiE,IAAK0C,EACtC,EAEA/B,eAAgBsI,EAAcvM,SAE7B+E,IAAmB1F,EAAKiE,KACrBxD,EAAAA,EAAAA,KAACmG,EAAAA,GAAa,KAEdC,EAAAA,EAAAA,MAAAnG,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAQsC,UAAU,cAAc+D,KAAK,SACjCC,QAASA,KAAMoH,OAtHJ/H,EAsH0BpG,EAAKiE,SArH1DoJ,GAAepG,IACb,MAAMC,EAAS,IAAIzB,IAAIwB,GAEvB,OADAC,EAAOX,IAAIH,GAASc,EAAOZ,IAAIF,IACxBc,CAAM,IAJYd,KAsHoC,EAAAzF,SAE9CuM,EAAgB,MACVlN,EAAKuN,aAENvN,EAAKuN,aAAaQ,SADlB,sBAIRb,IACEzM,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CAACpE,UAAS,aAAAqE,QA1GRhB,EA0G8CpG,EAAKiE,IAzGxEmJ,EAAY9G,IAAIF,GAAU,iBAAmB,QA2GxCS,EAAAA,EAAAA,MAAA,MAAI9D,UAAS,cAAAqE,OAxHCgH,EAAChI,EAAQpB,KACnC,MAAMsC,EAAatC,EAAMhI,OACzB,OAAI+H,EAAQ,GACLA,EAAQuC,EAAa,EACb8F,EAAY9G,IAAIF,GAAU,8BAAgC,QADrE,EAIOgH,EAAY9G,IAAIF,GAAU,qBAAuB,EAC5D,EAgHyCgI,CAAsBpO,EAAKiE,IAAKe,IAASrE,SAAA,EAClEF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,eAAcpC,UACxBF,EAAAA,EAAAA,KAAA,KAAGsC,UAAU,yBAAwBpC,SAC/BX,EAAKuN,aAA0B,WAAX,aAG5BvN,EAAKuN,aAGCG,EAAe1N,EAAKuN,aAAatJ,KAFjCyJ,YAnHItH,KA2HA,EC/KvBiI,EAA2B5Q,IAMjC,IANkC,wBACrCsP,EAAuB,MACvB/H,EAAK,KACLhF,EAAI,MACJ+E,EAAK,oBACLuJ,GACH7Q,EACG,MAAO8Q,EAAUC,IAAerO,EAAAA,EAAAA,WAAS,IAClC+M,EAAeC,IAAkBhN,EAAAA,EAAAA,WAAS,IAC1CsO,EAAWC,IAAgBvO,EAAAA,EAAAA,UAAS,IAAIsF,MACxCC,EAAgBC,IAAqBxF,EAAAA,EAAAA,UAAS,MAC/CwO,GAAY5M,EAAAA,EAAAA,QAAO,IAAI0D,KACvBzD,GAAWC,EAAAA,EAAAA,OAGjB5B,EAAAA,EAAAA,YAAU,KACN,MAAMkO,EAAWvO,EAAK4O,WAChBpB,EAAcxN,EAAKwN,YACtBe,IAAaA,EAAS1E,MAAQ0E,EAASd,OACtCe,GAAY,GAEZA,GAAY,GAGZrB,IADAK,EAIJ,GACF,CAACxN,EAAK4O,WAAY5O,EAAKwN,cAGzB,MA0BM3H,GAAiBC,EAAAA,EAAAA,cAAYC,IACb,WAAdA,EAAM7I,KACNwR,EAAa,IAAIjJ,IACrB,GACF,IAGIO,GAAwBF,EAAAA,EAAAA,cAAYC,IACtC,MAAME,EAAe,IAAIR,IAAIgJ,GAC7B,IAAIvI,GAAe,EAEnByI,EAAUrM,QAAQ6D,SAAQ,CAAChI,EAAKiI,KACxBjI,IAAQA,EAAIkI,SAASN,EAAMlJ,SAAW4R,EAAUnI,IAAIF,KACpDH,EAAaM,IAAIH,GAAQ,GACzBF,GAAe,EACnB,IAGAA,GACAwI,EAAazI,EACjB,GACD,CAACwI,KAGJpO,EAAAA,EAAAA,YAAU,KACNmG,SAASC,iBAAiB,UAAWZ,GACrCW,SAASC,iBAAiB,QAAST,GAE5B,KACHQ,SAASE,oBAAoB,UAAWb,GACxCW,SAASE,oBAAoB,QAASV,EAAsB,IAEjE,CAACA,EAAuBH,IAG3B,MAAM6H,EAAkBC,GACbZ,EACNa,QAAOC,GAAQA,EAAK5J,MAAQ0J,IAC5BpG,KAAI,CAACsG,EAAM9I,KACRtE,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,YAAWpC,UACrBkG,EAAAA,EAAAA,MAAA,KAAG9D,UAAU,iBACTgE,QAASA,IAAM+G,EAAmBD,GAAMlN,SAAA,CAC3C,OAAKkN,EAAKE,aAHgBhJ,KAWjC+I,EAAsBD,IACpBS,IACKpB,GAAkBqB,IACnB5I,EAAkB3F,EAAKiE,KACvBjC,GAASgM,EAAAA,EAAAA,IAAW,CAChB5H,OAAQpG,EAAKiE,IACbgK,KAAM,CACFW,WAAYf,EAAK5J,QAErB2D,SAAQ,KACRjC,EAAkB,KAAK,IAE3B+I,EAAa,IAAIjJ,OAEhByH,GAAiBqB,IAClB5I,EAAkB3F,EAAKiE,KACvBjC,GAASkM,EAAAA,EAAAA,IAAa,CAClB9H,OAAQpG,EAAKiE,IACbgK,KAAM,CACFW,WAAYf,EAAK5J,QAErB2D,SAAQ,KACRjC,EAAkB,KAAK,IAE3B+I,EAAa,IAAIjJ,MAEzB,EAIJ,OACIhF,EAAAA,EAAAA,KAACiE,EAAyB,CAACvG,IAAKwI,IACxBA,GACAgI,EAAUrM,QAAQiE,IAAIvG,EAAKiE,IAAK0C,EACpC,EAEA/B,eAAgBsI,EAChBrI,qBAAsByJ,EAAoB3N,SAEzC+E,IAAmB1F,EAAKiE,KACrBxD,EAAAA,EAAAA,KAACmG,EAAAA,GAAa,KAEdC,EAAAA,EAAAA,MAAAnG,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,UAAQsC,UAAU,cAAc+D,KAAK,SACjCC,QAASA,KAAM8H,OAxHNzI,EAwH0BpG,EAAKiE,SAvHxDyK,GAAazH,IACX,MAAMC,EAAS,IAAIzB,IAAIwB,GAEvB,OADAC,EAAOX,IAAIH,GAASc,EAAOZ,IAAIF,IACxBc,CAAM,IAJUd,KAwHoC,EAAAzF,SAE5CuM,EAAgB,MACVlN,EAAK4O,WAEN5O,EAAK4O,WAAWb,SADhB,sBAIRb,IACEzM,EAAAA,EAAAA,KAAC0G,EAAAA,EAAS,CAACpE,UAAS,aAAAqE,QA5GVhB,EA4G8CpG,EAAKiE,IA3GtEwK,EAAUnI,IAAIF,GAAU,iBAAmB,QA6GtCS,EAAAA,EAAAA,MAAA,MAAI9D,UAAS,cAAAqE,OA1HD0H,EAAC1I,EAAQpB,KACjC,MAAMsC,EAAatC,EAAMhI,OACzB,OAAI+H,EAAQ,GACLA,EAAQuC,EAAa,EACbmH,EAAUnI,IAAIF,GAAU,8BAAgC,QADnE,EAIOqI,EAAUnI,IAAIF,GAAU,qBAAuB,EAC1D,EAkHyC0I,CAAoB9O,EAAKiE,IAAKe,IAASrE,SAAA,EAChEF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,eAAcpC,UACxBF,EAAAA,EAAAA,KAAA,KAAGsC,UAAU,yBAAwBpC,SAC/BX,EAAK4O,WAAwB,WAAX,aAG1B5O,EAAK4O,WAGClB,EAAe1N,EAAK4O,WAAW3K,KAF/ByJ,YArHEtH,KA6HE,E,kCChL7B,MAAM2I,EAA2BpN,EAAAA,MAAWlE,IAAiD,IAAhD,mCAACuR,EAAkC,KAAEhP,GAAKvC,EAC1F,MAAMuE,GAAWC,EAAAA,EAAAA,MAQjB,OACIxB,EAAAA,EAAAA,KAACZ,EAAoB,CAAAc,UACjBkG,EAAAA,EAAAA,MAAA,OAAK9D,UAAU,kBAAiBpC,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,SACIsC,UAAU,WACV+D,KAAK,WACL+C,KAAK,uBACLzL,GAAI4B,EAAKiE,IACTgL,QAASD,EAAmCE,SAASlP,EAAKiE,KAC1Db,SAAUA,KAAM+L,OAdFlL,EAcuBjE,EAAKiE,SAbtDjC,GAASoN,EAAAA,EAAAA,IAA+B,CAACnL,SADfA,KAciC,KAEnD4C,EAAAA,EAAAA,MAAA,OAAK9D,UAAU,kBAAiBpC,SAAA,EAC5BF,EAAAA,EAAAA,KAAC4O,EAAAA,EAAY,CAACtM,UAAU,yBAAyBjF,MAAM,KAAKC,OAAO,QACnE0C,EAAAA,EAAAA,KAAC6O,EAAAA,EAAW,CAACvM,UAAU,wBAAwBjF,MAAM,KAAKC,OAAO,cAGtD,I,cCZxB,MAAMwR,EAAaA,KACxB,MAAM,QACJC,EAAO,mCACPR,EAAkC,WAClCS,EAAU,OACVxK,EAAM,SACNxD,IACEiO,EAAAA,EAAAA,MACE,eAAEC,IAAmBC,EAAAA,EAAAA,MACrB,QAAC1K,EAAO,aAAEE,EAAY,UAAED,EAAS,oBAAEmJ,EAAmB,WAAEuB,IAAcC,EAAAA,EAAAA,MACtE,UAAEC,EAAS,mBAAEC,EAAkB,wBAAEjD,IAA4BkD,EAAAA,EAAAA,MAC5DjL,EAAOkL,IAAY/P,EAAAA,EAAAA,YACpB6B,GAAWC,EAAAA,EAAAA,OAGjB5B,EAAAA,EAAAA,YAAU,KACJ2P,GAAsBD,EACxBG,EAASH,GACDP,GACRU,EAASV,EACX,GACC,CAACA,EAASO,EAAWC,IA2BxB,IAAIG,EAcJ,OAbInL,IACFmL,EAAgB,IAAInL,GAAOoL,MAAK,CAACC,EAAGC,IACjB,QAAbD,EAAEpL,QAAiC,QAAbqL,EAAErL,QAClB,EAEO,QAAboL,EAAEpL,QAAiC,QAAbqL,EAAErL,OACnB,EAEF,IAAI7E,KAAKkQ,EAAEC,WAAa,IAAInQ,KAAKiQ,EAAEE,eAM5C9P,EAAAA,EAAAA,KAACjB,EAAe,CAACuD,UAtBMyN,MACvB,GAAGxL,EACD,OAAOA,EAAMhI,OAAS,GAAK,cAAgB,EAC7C,EAmB4BwT,GAAoB/Q,oBAAqBuQ,EAAmBrP,UACtFkG,EAAAA,EAAAA,MAAA,SAAO9D,UAAU,QAAOpC,SAAA,EACtBF,EAAAA,EAAAA,KAAA,SAAOsC,UAAU,cAAapC,UAC5BkG,EAAAA,EAAAA,MAAA,MAAI9D,UAAU,kBAAiBpC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,eAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,UAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,eAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,WAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,WAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,YAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,YAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,aAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,YAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,UAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,eAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,iBAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,kBAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,iBAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,gBAC7BqP,IAAuB9K,GAAWC,KACnCA,GACE1E,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,+BAEhCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,uBAGjCqP,IAAuB9K,GAAWC,GAAamJ,KAChDA,GACE7N,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,6BAEhCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,qBAGpCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,eAChCF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,YAC/BuE,IACCzE,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAC,gBAItCF,EAAAA,EAAAA,KAAA,SAAAE,SACGqE,GAASmL,EAAc5I,KAAI,CAACvH,EAAM+E,KACjC8B,EAAAA,EAAAA,MAAA,MAAI9D,UAA2B,QAAhB/C,EAAKiF,OAAmB,aAAe,GAAGtE,SAAA,EACvDF,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAEX,EAAKyQ,YACtChQ,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAEX,EAAK6J,QACtCpJ,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAEX,EAAK0Q,YACtCjQ,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAEX,EAAKyN,SACtChN,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAEX,EAAK2Q,SACtClQ,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,UAC7BF,EAAAA,EAAAA,KAACqE,EAAM,CACLE,MAAOA,EACPhF,KAAMA,EACN+E,MAAOA,EACPE,OAAQA,EACRC,QAASA,EACTE,aAAcA,EACdD,UAAWA,OAGf1E,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAAEX,EAAK4Q,YACtCnQ,EAAAA,EAAAA,KAAA,MAAIrC,GAAG,gBAAgB2E,UAAU,kBAAiBpC,UAChDF,EAAAA,EAAAA,KAACkI,EAAO,CACN3D,MAAOA,EACPhF,KAAMA,EACN+E,MAAOA,EACPG,QAASA,EACTE,aAAcA,EACdD,UAAWA,OAGf1E,EAAAA,EAAAA,KAAA,MAAIrC,GAAG,eAAe2E,UAAU,kBAAiBpC,UAC/CF,EAAAA,EAAAA,KAACiK,EAAM,CACL1F,MAAOA,EACPhF,KAAMA,EACN+E,MAAOA,EACPG,QAASA,EACTE,aAAcA,EACdD,UAAWA,OAGf1E,EAAAA,EAAAA,KAAA,MAAIrC,GAAG,aAAa2E,UAAU,kBAAiBpC,UAC7CF,EAAAA,EAAAA,KAACmL,EAAI,CACH5G,MAAOA,EACPhF,KAAMA,EACN+E,MAAOA,EACPG,QAASA,EACTE,aAAcA,EACdD,UAAWA,OAGf1E,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,UAC7BF,EAAAA,EAAAA,KAACqH,EAAQ,CACP9C,MAAOA,EACPhF,KAAMA,EACN+E,MAAOA,EACPtD,SAAUA,EACVyD,QAASA,EACTE,aAAcA,EACdD,UAAWA,OAGf1E,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAkBC,MAAO,CAAE6N,SAAU,OAAQC,SAAU,SAASnQ,UAC5EF,EAAAA,EAAAA,KAACV,EAAU,CAACC,KAAMA,OAEpBS,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAC5BX,EAAKwN,YAAc,MAAQ,QAE9B/M,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAC5BX,EAAKuQ,WAAaZ,EAAe3P,EAAKuQ,cAEzC9P,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,SAC5BX,EAAK+Q,WAAapB,EAAe3P,EAAK+Q,cAEtCf,IAAuB9K,GAAWC,KACnC1E,EAAAA,EAAAA,KAAA,MAAIrC,GAAG,eAAe2E,UAAU,kBAC9BC,MAAO,CAAE9D,WAAYc,EAAKwN,YACtB,eACCxN,EAAKuN,cACL,aACH5M,SAEAwE,GASA1E,EAAAA,EAAAA,KAACqM,EAA0B,CACzBC,wBAAyBA,EACzB/H,MAAOA,EACPhF,KAAMA,EACN+E,MAAOA,EACPI,UAAWA,IAbbnF,EAAKwN,YAAe,MAClBxN,EAAKuN,aACHvN,EAAKuN,aAAaQ,SAElB,sBAcPiC,IAAuB9K,GAAWC,GAAamJ,KAChD7N,EAAAA,EAAAA,KAAA,MAAIrC,GAAG,cAAc2E,UAAU,kBAC7BC,MAAO,CAAE9D,WAAYc,EAAKwN,YACtB,eACCxN,EAAK4O,YACL,aACHjO,SAEA2N,GASA7N,EAAAA,EAAAA,KAAC4N,EAAwB,CACvBtB,wBAAyBA,EACzB/H,MAAOA,EACPhF,KAAMA,EACN+E,MAAOA,EACPuJ,oBAAqBA,IAbvBtO,EAAKwN,YAAe,MAClBxN,EAAK4O,WACH5O,EAAK4O,WAAWb,SAEhB,sBAcVtN,EAAAA,EAAAA,KAACiB,EAAQ,CAAC1B,KAAMA,KAChBS,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,UAC7BF,EAAAA,EAAAA,KAAA,UAAQsC,UAAU,YAAY+D,KAAK,SACjCC,QAASA,KAAMiK,OAjND/M,EAiNsBjE,EAAKiE,IAAKjE,EAAKiR,OAhNjEjP,GAASkP,EAAAA,EAAAA,OACTlP,GAASmP,EAAAA,EAAAA,IAAwB,gBAC7BtB,GAAc3K,EAChBlD,GACEoP,EAAAA,EAAAA,IAAY,CACVhL,OAAQnC,EACRgN,OAAQxB,KAGHI,IAAezK,GAAgBD,IACxCnD,GAASoP,EAAAA,EAAAA,IAAY,CAAEhL,OAAQnC,MAXLA,KAiN6C,EAAAtD,SAC5D,WAGFuE,IACCzE,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,kBAAiBpC,UAC7BF,EAAAA,EAAAA,KAACsO,EAAwB,CACvB/O,KAAMA,EACNgP,mCAAoCA,QAxImBhP,EAAKiE,aAgJ1D,E,iCC3Pf,MAAMoN,EAAcA,KACvB,MAAM,iBAAEC,IAAqB1B,EAAAA,EAAAA,MACvB,QAAE1K,IAAY4K,EAAAA,EAAAA,MACd,cAAEyB,EAAa,WAAE9B,EAAU,QAAED,EAAO,aAAEgC,IAAiB9B,EAAAA,EAAAA,MACvD,cAAE+B,IAAkBC,EAAAA,EAAAA,MACpB,mBAAE1B,IAAuBC,EAAAA,EAAAA,MACvB0B,EAAYC,IAAkBzR,EAAAA,EAAAA,WAAS,GACzC6B,GAAWC,EAAAA,EAAAA,OAGjB5B,EAAAA,EAAAA,YAAU,KACFmP,EAAQxS,OAAS,GACjB4U,GAAc,EAClB,GACF,CAACpC,EAAQxS,OAAQ4U,IAcnB,OACInR,EAAAA,EAAAA,KAAC/B,EAAiB,CAACU,SAAU8F,EAAQvE,UACjCkG,EAAAA,EAAAA,MAAA,OAAK9D,UAAU,SAAQpC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,OAAKsC,UAAU,YAAWpC,SACrBuE,GACG2B,EAAAA,EAAAA,MAAAnG,EAAAA,SAAA,CAAAC,SAAA,EACIkG,EAAAA,EAAAA,MAACgL,EAAAA,GAAO,CAAC9O,UAAU,OAAO+O,GAAG,IAAI/K,QAjB9BgL,KACnBtC,IACAzN,GAASgQ,EAAAA,EAAAA,OACThQ,GAASiQ,EAAAA,EAAAA,QAETjC,GACAhO,GAASkQ,EAAAA,EAAAA,MACb,EAUiFvR,SAAA,EACzDF,EAAAA,EAAAA,KAAC0R,EAAAA,EAAQ,CAACpP,UAAU,SACpBtC,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,SAAQpC,SAAC,aAE3BkG,EAAAA,EAAAA,MAAA,MAAI9D,UAAU,SAAQpC,SAAA,CAAE2Q,EAAiB7B,GAAY,kCAGzDhP,EAAAA,EAAAA,KAAA,MAAIsC,UAAU,SAAQpC,SAAC,0CAG/BF,EAAAA,EAAAA,KAAC2R,EAAAA,EAAW,KACZvL,EAAAA,EAAAA,MAAA,OAAK9D,UAAU,oBAAmBpC,SAAA,CAC5B4Q,IAAkBE,GAChBhR,EAAAA,EAAAA,KAAC4R,EAAAA,GAAc,IAEbb,IAAiBhC,IAAWmC,GAG1BlR,EAAAA,EAAAA,KAAC6R,EAAAA,EAAgB,CACbtP,MAAO,CAACuP,OAAQ,aAHpB9R,EAAAA,EAAAA,KAAC8O,EAAU,KAOnB9O,EAAAA,EAAAA,KAAC+R,EAAAA,EAAU,WAGH,E,MC9ErB,MAAMC,EAAkB9T,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,ijEAKjBC,GAAKA,EAAEC,MAAMC,MAAMC,aAOfH,GAAKA,EAAEC,MAAMC,MAAME,qBA0B9BJ,GAAKA,EAAEC,MAAMC,MAAMM,gBACVR,GAAKA,EAAEC,MAAMK,WAAWC,kBAK5BP,GAAKA,EAAEC,MAAMC,MAAMM,gBAIpBR,GAAKA,EAAEC,MAAMC,MAAME,qBAGlBJ,GAAKA,EAAEC,MAAMC,MAAME,qBASfJ,GAAKA,EAAEC,MAAMK,WAAWC,kBAO5BP,GAAKA,EAAEC,MAAMC,MAAMM,gBAIpBR,GAAKA,EAAEC,MAAMC,MAAME,qBAGlBJ,GAAKA,EAAEC,MAAMC,MAAME,qBAaPJ,GAAKA,EAAEC,MAAMC,MAAME,qBAWNJ,GAAKA,EAAEC,MAAMC,MAAME,qBCzFrDuT,GAAYA,KACrB,MAAM,SAAEC,EAAQ,uBAAEC,EAAsB,mBAAEC,IAAuB5C,EAAAA,EAAAA,KAC3DjO,GAAWC,EAAAA,EAAAA,MAYjB,OACIxB,EAAAA,EAAAA,KAACgS,EAAe,CAAA9R,UACZkG,EAAAA,EAAAA,MAAA,OAAK9D,UAAU,SAAQpC,SAAA,EACnBkG,EAAAA,EAAAA,MAAA,OAAK9D,UAAU,YAAWpC,SAAA,EACtBkG,EAAAA,EAAAA,MAAA,UAAQC,KAAK,SACT/D,UAAU,eACVgE,QAfE+L,KAClB9Q,GAAS+Q,EAAAA,EAAAA,MAAsB,EAcQpS,SAAA,EAEvBF,EAAAA,EAAAA,KAAC0R,EAAAA,EAAQ,CAACpP,UAAU,QAAO,+BAG/B8D,EAAAA,EAAAA,MAACgL,EAAAA,GAAO,CAAC9O,UAAU,OAAO+O,GAAG,SAAS/K,QAhBlCiM,KAChBhR,GAASkQ,EAAAA,EAAAA,MAA0B,EAeoCvR,SAAA,CAAC,iBAExDF,EAAAA,EAAAA,KAAC0R,EAAAA,EAAQ,CAACpP,UAAU,eAG5B8D,EAAAA,EAAAA,MAAA,MAAI9D,UAAU,SAAQpC,SAAA,CAAEgS,EAAS,QAAMC,EAAuB,oBAC7DC,GACGpS,EAAAA,EAAAA,KAAC4R,EAAAA,GAAc,KAEf5R,EAAAA,EAAAA,KAAC8O,EAAU,QAGL,E,eCtC1B,MA8BA,GA9BwB0D,KACpB,MAAMjR,GAAWC,EAAAA,EAAAA,OACX,mBAAE+N,IAAuBC,EAAAA,EAAAA,MACzB,QAAE/K,EAAO,UAAEC,EAAS,oBAAEmJ,EAAmB,aAAElJ,IAAiB0K,EAAAA,EAAAA,KAelE,OAZAzP,EAAAA,EAAAA,YAAU,MACD2P,IAAuB9K,GAAWC,GAAaC,KAChDpD,GAASkR,EAAAA,EAAAA,OACTlR,GAASmR,EAAAA,EAAAA,QAERnD,GAAuB9K,IAAYC,IAAamJ,GACjDtM,GAASoR,EAAAA,GAAAA,MACb,GACF,CAACpR,EAAUkD,EAASE,EAAckJ,EAAqBnJ,EAAW6K,KAKhEvP,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACKqP,GACGvP,EAAAA,EAAAA,KAACiS,GAAS,KAEVjS,EAAAA,EAAAA,KAAC4Q,EAAW,KAEjB,C","sources":["images/svg-icons/arrow-left.svg","components/OfficeLeads/OfficeLeads.styled.js","components/table/tableLeads/tableLeads.styled.js","components/table/tableLeads/TableComponents/clientTime.jsx","components/table/tableLeads/TableComponents/nextCall.jsx","components/table/tableLeads/TableComponents/TableComponets.Styled.js","components/table/tableLeads/TableComponents/Status.jsx","components/table/tableLeads/TableComponents/TimeZone.jsx","components/table/tableLeads/TableComponents/Country.jsx","components/table/tableLeads/TableComponents/Region.jsx","components/table/tableLeads/TableComponents/City.jsx","components/table/tableLeads/TableComponents/ManagerAssignReassign.jsx","components/table/tableLeads/TableComponents/AgentAssignReAssignBlock.jsx","components/table/tableLeads/TableComponents/CustomAssignLeadCheckbox.jsx","components/table/tableLeads/tableLeads.jsx","components/OfficeLeads/OfficeLeads.jsx","components/OfficeLeads/UserLeads.styled.js","components/OfficeLeads/UserLeads.jsx","pages/OfficeLeads.jsx"],"sourcesContent":["var _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgArrowLeft(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 16,\n    height: 16,\n    viewBox: \"0 0 16 16\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"vuesax/linear/arrow-right\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"arrow-right\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector\",\n    d: \"M6.38 3.95312L2.33334 7.99979L6.38 12.0465\",\n    strokeMiterlimit: 10,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    id: \"Vector_2\",\n    d: \"M13.6667 8H2.44666\",\n    strokeMiterlimit: 10,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  })))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowLeft);\nexport default __webpack_public_path__ + \"static/media/arrow-left.d83f2da68a3f119c6c553c0110084034.svg\";\nexport { ForwardRef as ReactComponent };","import styled from \"styled-components\";\n\n\nexport const StyledOfficeLeads = styled.div`\n    margin-top: 0.5rem;\n    margin-left: 0.5rem;\n    margin-right: 0.5rem;\n    border-radius: 0.75rem;\n    background-color: ${p => p.theme.color.background};\n    box-shadow: 4px 0px 14px 5px rgba(227, 255, 168, 0.2);\n    padding: 0.75rem;\n\n\n    .wraper{\n        width: 100%;\n        border: 1px solid ${p => p.theme.color.primary_green_lite};\n        border-radius: 0.75rem;\n        padding: 0.75rem;\n        height: 90.5dvh;\n\n        @media screen and (min-width: 834px) {\n            height: 87.5dvh;\n            display: flex;\n            flex-direction: column;\n        }\n    }\n\n    .content-container{\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n        flex-grow: 1;\n    }\n\n    .nav-block{\n        display: flex;\n        align-items: center;\n        justify-content: ${p => p.$isAdmin ? 'none' : 'center'};\n        margin-bottom: 1rem;\n    }\n\n    .link{\n        display: flex;\n        align-items: center;\n        gap: 0.25rem;\n        margin-right: 32%;\n        transition: all ${p => p.theme.transition.main_transition};\n\n        .svg{\n            width: 1.5rem;\n            height: 1.5rem;\n            stroke: ${p => p.theme.color.primary_white};\n        }\n\n        &:hover{\n            color: ${p => p.theme.color.primary_green_lite};\n        }\n        &:hover .svg{\n            stroke: ${p => p.theme.color.primary_green_lite};\n        }\n    }\n\n    .titles{\n        font-weight: 700;\n        font-size: 1.5rem\n    }\n\n    .small-table{\n        border-right: 1px solid ${p => p.theme.color.primary_green_lite};\n\n        & tbody{\n            & tr{\n                & td:last-child{\n                    border-right: none;\n                }\n            }\n\n            & tr:last-child{\n                & td{\n                    border-bottom: 1px solid ${p => p.theme.color.primary_green_lite};\n                }\n            }\n        }\n    }\n`","import styled from \"styled-components\";\n\n\nexport const TableListStyled = styled.div`\n  color: ${p => p.theme.color.primary_white};\n  overflow-y: auto;\n  height: 74dvh;\n  position: relative;\n  border: 1px solid ${p => p.theme.color.primary_green_lite};\n  border-right: none;\n  border-radius: 12px;\n\n  @media screen and (min-width: 834px){\n    height: 71dvh;\n  }\n\n  @media screen and (min-width: 1236px){\n    height: ${props => props.$userLeadsComponent ? '73dvh' : '66.2dvh'};\n  }\n\n  &::-webkit-scrollbar {\n    width: 0.5rem;\n    background-color: ${p => p.theme.color.primary_grey};\n    border-radius: 24px;\n  }\n  &::-webkit-scrollbar-thumb {\n    border-radius: 5px;\n    background-color: ${p => p.theme.color.primary_green_lite};\n  }\n\n\n  & table {\n    width: 100%;\n    border-collapse: collapse;\n    table-layout: auto;\n\n    & thead{\n      position: sticky;\n      top: 0;\n      z-index: 2;\n\n      & th{\n        background-color: ${p => p.theme.color.background3};\n        border-bottom: 1px solid ${p => p.theme.color.primary_green_lite};\n        border-right: 1px solid ${p => p.theme.color.primary_green_lite};\n        padding: 1rem 0.25rem 1rem 0.25rem;\n\n\n        &:last-child{\n          border-right: none;\n        }\n      }\n    }\n  }\n\n  .back-color{\n    background-color: #369469;\n    box-shadow: rgba(0, 0, 0, 0.5) 0px 0px 10px 10px inset;\n  }\n\n  & tr, td, th{\n    text-align: center;\n  }\n\n  & tbody{\n    & td {\n      border-bottom: 1px solid ${p => p.theme.color.primary_green_lite};\n      border-right: 1px solid ${p => p.theme.color.primary_green_lite};\n      padding:0.5rem 0.25rem;\n    }\n\n    & tr:last-child{\n      & td{\n        border-bottom: none;\n      }\n    }\n  }\n\n  .TableHeaderName{\n    font-weight: 600;\n    font-size: 0.9rem;\n    overflow-wrap: break-word;\n    text-align: center;\n  }\n\n  .TableHeaderItem {\n    font-weight: 500;\n    font-size: 0.5rem;\n    overflow-wrap: break-word;\n    text-align: center;\n    position: relative;\n  }\n\n  #cityColumn,\n  #regionColumn,\n  #countryColumn,\n  #managerColumn,\n  #agentColumn {\n    padding: 0.5rem 0rem;\n  }\n\n  .calendar-cont{\n    width: 100%;\n    height: 100%;\n    \n    & input{\n      width: 72px;\n      border: none;\n      background: none;\n      padding: 0;\n      text-align: center;\n      color: ${props => props.theme.color.primary_white};\n      transition: border ${props => props.theme.transition.main_transition};\n\n      &:focus,\n      &:hover {\n        color: ${props => props.theme.color.primary_green_lite};\n\n        &::placeholder{\n        color: ${props => props.theme.color.primary_green_lite};\n      }\n      }\n      \n      &::placeholder{\n        color: ${props => props.theme.color.primary_white};\n      }\n    }\n  }\n\n  .check-btn{\n    font-size: 0.5rem;\n    color: ${(props) => props.theme.color.primary_black};\n    background-color: ${p => p.theme.color.primary_green_lite};\n    border: 1px solid ${p => p.theme.color.primary_green_lite};\n    padding: 0.25rem 0.25rem;\n    border-radius: 0.5rem;\n    cursor: pointer;\n    transition: color ${p => p.theme.transition.main_transition};\n    flex-wrap: nowrap;\n\n    &:hover{\n      color: ${props => props.theme.color.primary_grey};\n    }\n  }\n`;\n\n\n\n\n\n\n\n\n\n\nexport const CustomCheckboxStyled = styled.div`\n\n  .custom-checkbox{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .checkbox {\n    margin-top: 5px;\n    width: 1rem;\n    height: 1rem;\n    outline: none;\n    border: none;\n    cursor: pointer;\n    opacity: 0;\n  }\n  \n  .custom-checkbox-before, .custom-checkbox-after{\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    pointer-events: none;\n  }\n  .custom-checkbox-before{\n    opacity: 1;\n    transition: opacity ${p => p.theme.transition.main_transition};\n  }\n  .custom-checkbox-after{\n    opacity: 0;\n    transition: opacity ${p => p.theme.transition.main_transition};\n  }\n  .checkbox:focus + .custom-checkbox > .custom-checkbox-before{\n    outline: 3px solid ${p => p.theme.color.primary_green_lite};\n    border-radius: 2px;\n    outline-offset: -3px; \n  }\n\n  .checkbox:checked + .custom-checkbox > .custom-checkbox-after{\n    opacity: 1;\n  }\n  .checkbox:checked + .custom-checkbox > .custom-checkbox-before{\n    opacity: 0;\n  }\n`\n","import { useState, useEffect } from \"react\";\n\n\n\nexport const ClientTime = ({ lead }) => {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  \n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n\n  const calculateClientTime = (timeZoneOffset) => {\n    const currentUTCTime  = new Date(\n      currentTime.getTime() + currentTime.getTimezoneOffset() * 60000\n    );     \n\n    const clientTime = new Date(\n      currentUTCTime.getTime() + timeZoneOffset * 60 * 60 * 1000\n    );\n    \n    return clientTime.toLocaleString(\"ru-RU\", {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: undefined \n    });\n  };\n  \n\n  return (\n    <>\n      {calculateClientTime(lead.timeZone)}\n    </>\n  );\n};\n","import Flatpickr from \"react-flatpickr\";\nimport \"flatpickr/dist/themes/dark.css\";\nimport React, { useState, useEffect ,useMemo, useRef } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { patchNextCall } from \"../../../../redux/Lead/lead-operation\";\n\n\n\nexport const NextCall = React.memo(({ lead }) => {\n  const [date, setDate] = useState(null);\n  const dateNow = useRef(new Date());\n  const dispatch = useDispatch();\n\n\n  const nextCallDate = useMemo(() => {\n    return lead.nextCall ? new Date(lead.nextCall) : null;\n  }, [lead.nextCall]);\n\n\n  const isOverdue = date && date < dateNow.current;\n  const timeLeft = date ? date - dateNow.current : 0;\n  const isAlmostDue = !isOverdue && timeLeft <= 6 * 60 * 60 * 1000;\n  const isToday = date && dateNow.current.toDateString() === date.toDateString();\n  const minDateOption = date && date > dateNow.current ? \"today\" : null;\n  const minTimeOption = isToday ? dateNow.current.toTimeString().slice(0, 5) : null;\n\n\n  useEffect(() => {\n    if (lead.nextCall) {\n      setDate(nextCallDate);\n    } else {\n      setDate(null);\n    }\n  }, [lead.nextCall, nextCallDate]);\n\n\n  const submitNextCallDate = () => {\n    if ((date !== (nextCallDate || null)) && (date !== dateNow.current)) {\n      if (isOverdue) {\n        setDate(null);\n      } else {\n        const updatedDate = date.toISOString().slice(0, 16)\n        dispatch(patchNextCall({\n          id: lead._id, \n          leadNextcall: updatedDate \n        }))\n      }\n    }\n  };\n\n\n  return (\n    <td className=\"TableHeaderItem\"\n      style={{\n        backgroundColor: isOverdue\n          ? '#ff000082'\n          : isAlmostDue\n          ? '#223f53'\n          : 'transparent'\n      }}\n    >\n      <div className=\"calendar-cont\">\n        <Flatpickr\n          data-enable-time\n          value={date ? date : ''}\n          onChange={([date]) => setDate(date)}\n          options={{\n            dateFormat: \"d.m.Y  H:i\",\n            minDate: minDateOption,\n            minTime: minTimeOption,\n            weekNumbers: true,\n            \"locale\": {\n              \"firstDayOfWeek\": 1\n            },\n          }}\n          placeholder=\"Select Date/ Time\"\n          onClose={submitNextCallDate}\n        />   \n      </div>\n    </td>\n  );\n});\n","import styled from \"styled-components\"\n\n\nexport const StatusesStyled = styled.div`\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n\n    .status-btn{\n        color: ${p => p.theme.color.primary_white};\n        padding: 0;\n        width: 100%;\n        min-height: 1.3rem;\n        background-color: transparent;\n    }\n\n    .arrow-svg {\n        position: absolute;\n        width: 0.5rem;\n        height: 0.5rem;\n        stroke: black;\n        stroke: ${p => p.theme.color.primary_green_lite};\n        transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n        top: -4px;\n        right: -2px;\n        transform: rotate(-90deg);\n    } \n    \n    .arrow-svg-open {\n        transform: rotate(90deg);\n    } \n\n    .status-list{\n        height: 0rem;\n        position: absolute;\n        overflow-y: auto;\n        z-index: 1;\n        top: -0.5rem;\n        left: ${props => props.$isTimeZone ? '115%' : '110%'};\n        border-radius: 0.5rem;\n        padding: 0.25rem;\n        gap: 0.75rem;\n        background-color: ${p => p.theme.color.background2};\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: space-evenly;\n        visibility: hidden;\n        opacity: 0;\n        font-size: 0.25rem;\n        border: 0.25rem solid ${p => p.theme.color.background3};\n        transform: scale(0.5);\n        transform-origin: left top;\n        transition: all ${p => p.theme.transition.main_transition};\n\n\n        &::-webkit-scrollbar {\n            width: 0.25rem;\n            background-color: transparent;\n        }\n        &::-webkit-scrollbar-thumb {\n            border-radius: 5px;\n            background-color: ${p => p.theme.color.primary_grey};\n            border-radius: 5px;\n        }\n    }\n\n    .status-list-visible{\n        height: 11.7rem;\n        width: ${props => props.$isTimeZone ? '4rem' : '7rem'};\n        opacity: 1;\n        visibility: visible;\n        transform: scale(1);\n        transform-origin: left top;\n        font-size: 0.7rem;\n    }\n\n    .status-list-visible-adjusted{\n        top: -10.1rem;\n        height: 11.7rem;\n        width: ${props => props.$isTimeZone ? '4rem' : '7rem'};\n        opacity: 1;\n        visibility: visible;\n        transform: scale(1);\n        transform-origin: left top;\n        font-size: 0.7rem;\n    }\n\n    .status-item{\n        cursor: pointer;\n\n        & .drop-cont-text{\n            transition: color ${p => p.theme.transition.main_transition};\n            color: ${p => p.theme.color.primary_white};\n\n            &:hover{\n                color: ${p => p.theme.color.primary_green_lite}\n            }\n        }\n    }\n`\n\n\n\n\n\n\n\n\n\n\nexport const CountryStyled = styled.div`\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n\n    .data-btn{\n        color: ${props => {\n            if (props.$isCountry || props.$isRegion || props.$isCity){\n                return props.theme.color.primary_white;\n            } else {\n                return props.theme.color.primary_grey;\n            }\n        }};\n        padding: 0rem 0.25rem;\n        width: 100%;\n        min-height: 1.3rem;\n        background-color: transparent;\n    }\n\n    .arrow-icon {\n        position: absolute;\n        width: 0.5rem;\n        height: 0.5rem;\n        stroke: black;\n        stroke: ${p => p.theme.color.primary_green_lite};\n        transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n        bottom: -5px;\n        left: 4px;\n        transform: rotate(0deg);\n    } \n    \n    .arrow-icon-open {\n        transform: rotate(180deg);\n    }\n\n    .input-form{\n        visibility: hidden;\n        opacity: 0;\n        position: absolute;\n        z-index: 1;\n        left: 0;\n        top: 145%;\n        transform: scale(0);\n        background-color: ${p => p.theme.color.background2};\n        border: 0.25rem solid ${p => p.theme.color.background3};\n        border-radius: 0.75rem;\n        padding: 0.8rem 0.5rem;\n        transform-origin: left top;\n        transition: all ${p => p.theme.transition.main_transition};\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        gap: 0.5rem;\n        \n        \n        & input{\n            text-align: center;\n            padding: 0.25rem;\n            border-radius: 0.75rem;\n            border: 1px solid ${p => p.theme.color.primary_green_lite};\n            background: transparent;\n            font-size: 0.8rem;\n            font-weight: 400;\n            color: ${p => p.theme.color.primary_white};\n            outline: none;\n\n            &::placeholder{\n                color: ${p => p.theme.color.primary_grey};\n                letter-spacing: 0.04em;\n            }\n\n            &:focus{\n                border: 1px solid ${p => p.theme.color.primary_white};\n            }\n        }\n\n        & .submit-button{\n            color: ${(props) => props.theme.color.primary_black};\n            background-color: ${(p) => p.theme.color.primary_green_lite};\n            font-size: 0.8rem;\n            font-weight: 500;\n            width: 50%;\n            border: 1px solid ${(p) => p.theme.color.primary_green_lite};\n            border-radius: 0.5rem;\n            padding: 0.25rem;\n            cursor: pointer;\n            transition: color ${p => p.theme.transition.main_transition};\n\n            &:hover {\n                color: ${(props) => props.theme.color.primary_grey};\n            }\n\n            &:disabled{\n                display: none;\n            }\n        }\n    }\n\n    .input-form-visible{\n        visibility: visible;\n        opacity: 1;\n        transform: scale(1);\n        transform-origin: left top;\n    }\n\n    .input-form-visible-adjusted{\n        top: -325%;\n        visibility: visible;\n        opacity: 1;\n        transform: scale(1);\n        transform-origin: left top;\n    }\n`\n\n\n\n\n\n\n\n\n\n\nexport const AssignReassignBlockStyled = styled.div`\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    position: relative;\n\n    .manager-btn{\n        color: ${p => p.theme.color.primary_white};\n        padding: 0;\n        width: 100%;\n        min-height: 1.3rem;\n        background-color: transparent;\n        pointer-events: ${props => props.$isSelfCreated && 'none'};\n    }\n\n    .arrow-svg {\n        position: absolute;\n        width: 0.5rem;\n        height: 0.5rem;\n        stroke: black;\n        stroke: ${p => p.theme.color.primary_green_lite};\n        transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n        top: -4px;\n        right: 2px;\n        transform: rotate(-90deg);\n    } \n    \n    .arrow-svg-open {\n        transform: rotate(90deg);\n    } \n\n    .users-list{\n        height: 0rem;\n        position: absolute;\n        overflow-y: auto;\n        z-index: 1;\n        top: -0.5rem;\n        left: ${props => props.$isConversionManager ? '102%' : '106%'};\n        border-radius: 0.5rem;\n        padding: 0.25rem;\n        gap: 0.75rem;\n        background-color: ${p => p.theme.color.background2};\n        display: flex;\n        flex-direction: column;\n        gap: 1rem;\n        visibility: hidden;\n        opacity: 0;\n        font-size: 0.25rem;\n        border: 0.25rem solid ${p => p.theme.color.background3};\n        transform: scale(0.5);\n        transform-origin: left top;\n        transition: all ${p => p.theme.transition.main_transition};\n\n\n        &::-webkit-scrollbar {\n            width: 0.25rem;\n            background-color: transparent;\n        }\n        &::-webkit-scrollbar-thumb {\n            border-radius: 5px;\n            background-color: ${p => p.theme.color.primary_grey};\n            border-radius: 5px;\n        }\n    }\n\n    .users-list-visible{\n        height: 11.7rem;\n        width: 8.7rem;\n        opacity: 1;\n        visibility: visible;\n        transform: scale(1);\n        transform-origin: left top;\n        font-size: 0.7rem;\n    }\n\n    .users-list-visible-adjusted{\n        top: -9.9rem;\n        height: 11.7rem;\n        width: 8.7rem;\n        opacity: 1;\n        visibility: visible;\n        transform: scale(1);\n        transform-origin: left top;\n        font-size: 0.7rem;\n    }\n\n    .user-item{\n        cursor: pointer;\n\n        & .drop-cont-text{\n            transition: color ${p => p.theme.transition.main_transition};\n            color: ${p => p.theme.color.primary_white};\n            text-align: left;\n\n            &:hover{\n                color: ${p => p.theme.color.primary_green_lite}\n            }\n        }\n    }\n\n    .initial-item{\n        pointer-events: none;\n        font-weight: 500;\n        font-size: 1rem;\n        color: ${p => p.theme.color.primary_green_lite};\n    }\n`","import { ReactComponent as ArrowDown } from \"../../../../images/svg-icons/arrow-down.svg\";\nimport { StatusesStyled } from \"./TableComponets.Styled\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { patchStatus } from \"../../../../redux/Lead/lead-operation\";\nimport { useDispatch } from \"react-redux\";\nimport { UpdateLoading } from \"../../../CustomLoaders/CustomLoaders\";\n\n\nexport const Status = React.memo(({\n    index, \n    leads, \n    lead, \n    status, \n    isAdmin, \n    isManager, \n    isConversion, \n}) => {\n    const [isStatus, setStatus] = useState(false);\n    const [openStatus, setOpenStatus] = useState(new Map());\n    const [updatingLeadId, setUpdatingLeadId] = useState(null);\n    const statusRefs = useRef(new Map());\n    const dispatch = useDispatch();\n    \n\n    useEffect(() => {\n        if(status && status !== ''){\n            setStatus(true);\n        } else {\n            setStatus(false);\n        }\n    },[status]);\n\n\n    const toggleStatusMenuDrop = (leadId) => {\n        setOpenStatus(prevState => {\n          const newMap = new Map(prevState);\n          newMap.set(leadId, !newMap.get(leadId));\n          return newMap;\n        });\n    };\n    \n    \n    const toggleStatusDropCont = (leadId, leads) => {\n        const totalLeads = leads.length;\n        if (index > 14) {\n            if(index > totalLeads - 5){\n                return openStatus.get(leadId) ? 'status-list-visible-adjusted' : '';\n            }\n        } else {\n            return openStatus.get(leadId) ? 'status-list-visible' : '';\n        }\n    };\n\n    \n    const toggleStatusDropArrow = (leadId) => {\n        return openStatus.get(leadId) ? 'arrow-svg-open' : '';\n    };\n    \n    \n    const handleKeyPress = useCallback(event => {\n        if (event.key === 'Escape') {\n            setOpenStatus(new Map());\n        }\n    },[]);\n    \n    \n    const handleBackgroundClick = useCallback(event => {\n        const newOpenMenus = new Map(openStatus);\n        let shouldUpdate = false;\n\n        statusRefs.current.forEach((ref, leadId) => {\n            if (ref && !ref.contains(event.target) && openStatus.get(leadId)) {\n                newOpenMenus.set(leadId, false);\n                shouldUpdate = true;\n            }\n        });\n\n        if (shouldUpdate) {\n            setOpenStatus(newOpenMenus);\n        }\n    }, [openStatus]);\n    \n    \n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress);\n        document.addEventListener('click', handleBackgroundClick);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n            document.removeEventListener('click', handleBackgroundClick);\n        };\n    }, [handleBackgroundClick, handleKeyPress]);\n\n\n    const submitStatus = (newStatus) => {\n        if (isAdmin || isManager || isConversion) {\n            const dataStatus = {\n                id: lead._id,\n                leadStatus: newStatus\n            };\n            setUpdatingLeadId(lead._id);\n            dispatch(patchStatus(dataStatus)).finally(() => {\n                setUpdatingLeadId(null);\n            });\n            setOpenStatus(new Map());\n        }\n    };\n\n\n    return (\n        <StatusesStyled ref={el => {\n            if (el) {\n                statusRefs.current.set(lead._id, el);\n            }\n        }}>\n            {updatingLeadId === lead._id ? (\n                <UpdateLoading /> \n            ) : (\n                <>\n                    <button className=\"status-btn\" type='button'\n                        onClick={() => toggleStatusMenuDrop(lead._id)}\n                    >\n                        {isStatus ? lead.status : 'N/A'}\n                    </button>\n                    <ArrowDown className={`arrow-svg ${toggleStatusDropArrow(lead._id)}`}/>\n                    <ul className={`status-list ${toggleStatusDropCont(lead._id, leads)}`}>\n                        {status.map((status, index) => (\n                            <li className=\"status-item\" key={index}>\n                                <p className=\"drop-cont-text\"\n                                    onClick={() => submitStatus(status)}\n                                >{status}</p>\n                            </li>\n                        ))}\n                    </ul>\n                </>\n                )\n            }\n        </StatusesStyled>\n    );\n});","import { ReactComponent as ArrowDown } from \"../../../../images/svg-icons/arrow-down.svg\";\nimport { StatusesStyled } from \"./TableComponets.Styled\";\nimport React, { useState, useEffect, useRef, useCallback } from \"react\";\nimport { patchTimeZone } from \"../../../../redux/Lead/lead-operation\";\nimport { useDispatch } from \"react-redux\";\nimport { UpdateLoading } from \"../../../CustomLoaders/CustomLoaders\";\n\n\n\nexport const TimeZone = React.memo(({\n    index, \n    leads, \n    lead, \n    timeZone, \n    isAdmin, \n    isManager, \n    isConversion\n}) => {\n    const [isTimeZone, setTimeZone] = useState(false);\n    const [openTimeZone, setOpenTimeZone] = useState(new Map());\n    const [updatingLeadId, setUpdatingLeadId] = useState(null);\n    const timeZoneRefs = useRef(new Map());\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        if(timeZone && timeZone !== ''){\n            setTimeZone(true);\n        } else {\n            setTimeZone(false);\n        }\n    },[timeZone]);\n\n\n    const toggleTimeZoneMenuDrop = (leadId) => {\n        setOpenTimeZone(prevState => {\n          const newMap = new Map(prevState);\n          newMap.set(leadId, !newMap.get(leadId));\n          return newMap;\n        });\n    };\n    \n\n    const toggleTimeZoneDropCont = (leadId, leads) => {\n        const totalLeads = leads.length;\n        if (index > 14) {\n            if(index > totalLeads - 5){\n                return openTimeZone.get(leadId) ? 'status-list-visible-adjusted' : '';\n            }\n        } else {\n            return openTimeZone.get(leadId) ? 'status-list-visible' : '';\n        }\n    };\n\n    \n    const toggleTimeZoneDropArrow = (leadId) => {\n        return openTimeZone.get(leadId) ? 'arrow-svg-open' : '';\n    };\n\n\n    const handleKeyPress = useCallback(event => {\n        if (event.key === 'Escape') {\n            setOpenTimeZone(new Map());\n        }\n    },[]);\n    \n    \n    const handleBackgroundClick = useCallback(event => {\n        const newOpenMenus = new Map(openTimeZone);\n        let shouldUpdate = false;\n\n        timeZoneRefs.current.forEach((ref, leadId) => {\n            if (ref && !ref.contains(event.target) && openTimeZone.get(leadId)) {\n                newOpenMenus.set(leadId, false);\n                shouldUpdate = true;\n            }\n        });\n\n        if (shouldUpdate) {\n            setOpenTimeZone(newOpenMenus);\n        }\n    }, [openTimeZone]);\n\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress);\n        document.addEventListener('click', handleBackgroundClick);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n            document.removeEventListener('click', handleBackgroundClick);\n        };\n    }, [handleBackgroundClick, handleKeyPress]);\n\n\n    const submitTimeZone = (timeZone) => {\n        if (isAdmin || isManager || isConversion) {\n            const dataTimeZone = {\n                id: lead._id,\n                leadTimeZone: timeZone\n            }\n            setUpdatingLeadId(lead._id);\n            dispatch(patchTimeZone(dataTimeZone)).finally(() => {\n                setUpdatingLeadId(null);\n            });\n            setOpenTimeZone(new Map());\n        }\n    };\n\n\n    return(\n        <StatusesStyled ref={el => {\n            if (el) {\n                timeZoneRefs.current.set(lead._id, el);\n            }}}\n            $isTimeZone={isTimeZone}\n        >   \n            {updatingLeadId === lead._id ? (\n                <UpdateLoading/>\n            ) : (\n                <>\n                    <button className=\"status-btn\" type='button'\n                        onClick={() => toggleTimeZoneMenuDrop(lead._id)}\n                    >\n                        {isTimeZone ? lead.timeZone : 'N/A'}\n                    </button>\n                    <ArrowDown className={`arrow-svg ${toggleTimeZoneDropArrow(lead._id)}`}/>\n                    <ul className={`status-list ${toggleTimeZoneDropCont(lead._id, leads)}`}>\n                        {timeZone.map((zone, index) => (\n                            <li className=\"status-item\" key={index}>\n                                <p className=\"drop-cont-text\"\n                                    onClick={() => submitTimeZone(zone)}\n                                >{zone}</p>\n                            </li>\n                        ))}\n                    </ul>\n                </>\n            )}\n        </StatusesStyled>\n    );\n});","import { CountryStyled } from \"./TableComponets.Styled\";\nimport { ReactComponent as ArrowDown } from \"../../../../images/svg-icons/arrow-down.svg\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { patchCountryLead } from \"../../../../redux/Lead/lead-operation\";\nimport { useDispatch } from \"react-redux\";\nimport { UpdateLoading } from \"../../../CustomLoaders/CustomLoaders\";\n\n\n\nexport const Country = ({index, leads, lead, isAdmin, isManager, isConversion}) => {\n    const [isCountry, setCountry] = useState(false);\n    const [openCountry, setOpenCountry] = useState(new Map());\n    const [countryValue, setCountryValue] = useState('');\n    const [isCountryEnable, setCountryEnable] = useState(false);\n    const [updatingLeadId, setUpdatingLeadId] = useState(null);\n    const countryRefs = useRef(new Map());\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        if(lead.country && lead.country !== ''){\n            setCountry(true);\n        } else {\n            setCountry(false);\n        }\n    },[lead.country]);\n\n\n    const toggleCountryMenuDrop = (leadId) => {\n        setOpenCountry(prevState => {\n          const newMap = new Map(prevState);\n          newMap.set(leadId, !newMap.get(leadId));\n          return newMap;\n        });\n        setCountryValue('');\n        setCountryEnable(false);\n    };\n\n\n    const toggleCountryDropCont = (leadId, leads) => {\n        const totalLeads = leads.length;\n        if ((index > 15) && (index > totalLeads - 3)) {\n            return openCountry.get(leadId) ? 'input-form-visible-adjusted' : '';\n        } else {\n            return openCountry.get(leadId) ? 'input-form-visible' : '';\n        }\n    };\n\n\n    const toggleCountryDropArrow = (leadId) => {\n        return openCountry.get(leadId) ? 'arrow-icon-open' : '';\n    };\n\n\n    const handleKeyPress = useCallback(event => {\n        if (event.key === 'Escape') {\n            setOpenCountry(new Map());\n            setCountryValue('');\n            setCountryEnable(false);\n        }\n    },[]);\n    \n    \n    const handleBackgroundClick = useCallback(event => {\n        const newOpenMenus = new Map(openCountry);\n        let shouldUpdate = false;\n\n        countryRefs.current.forEach((ref, leadId) => {\n            if (ref && !ref.contains(event.target) && openCountry.get(leadId)) {\n                newOpenMenus.set(leadId, false);\n                shouldUpdate = true;\n            }\n        });\n\n        if (shouldUpdate) {\n            setOpenCountry(newOpenMenus);\n        }\n    }, [openCountry]);\n    \n    \n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress);\n        document.addEventListener('click', handleBackgroundClick);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n            document.removeEventListener('click', handleBackgroundClick);\n        };\n    }, [handleBackgroundClick, handleKeyPress]);\n\n\n    const onCountryValueChange = (e) => {\n        setCountryValue(e.target.value);\n        if((e.target.value.toLowerCase() !== lead.country.toLowerCase()) && (e.target.value !== '')){\n            setCountryEnable(true);\n        } else {\n            setCountryEnable(false);\n        }\n    };\n\n\n    const saveCountryValue = () => {\n        if (isAdmin || isManager || isConversion) {\n            const formattedCountryValue = countryValue\n            .split(' ')\n            .map(word => {\n                if (word === word.toUpperCase()) {\n                    return word;\n                }\n                return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n            })\n            .join(' ');\n\n            const dataCountryLead = {\n                id: lead._id,\n                leadCountry: formattedCountryValue\n            }\n            setUpdatingLeadId(lead._id);\n            dispatch(patchCountryLead(dataCountryLead)).finally(() => {\n                setUpdatingLeadId(null);\n            });\n            setCountryEnable(false);\n            setCountryValue('');\n            setOpenCountry(new Map());\n        }\n    };\n\n\n    return (\n      <CountryStyled ref={el => {\n        if (el) {\n            countryRefs.current.set(lead._id, el);\n        }}}\n        $isCountry={isCountry}\n      > \n        {updatingLeadId === lead._id ? (\n            <UpdateLoading/>\n        ) : (\n            <>\n                <button className=\"data-btn\" type='button'\n                    onClick={() => toggleCountryMenuDrop(lead._id)}\n                >\n                    {isCountry ? lead.country : 'Enter Country'}\n                </button>\n                <ArrowDown className={`arrow-icon ${toggleCountryDropArrow(lead._id, leads)}`}/>\n                <form className={`input-form ${toggleCountryDropCont(lead._id, leads)}`} onSubmit={(e) => e.preventDefault()}>\n                    <label htmlFor=\"country\">\n                        <input type=\"text\"\n                            value={countryValue}\n                            onChange={onCountryValueChange}\n                            id='country'\n                            name=\"country\"\n                            placeholder=\"Enter Country\"\n                            required\n                        />\n                    </label>\n                    <button type=\"submit\" \n                        className=\"submit-button\"\n                        disabled={!isCountryEnable}\n                        onClick={saveCountryValue}\n                        >Save\n                    </button>\n                </form>\n            </>\n        )}\n      </CountryStyled>\n    );\n};","import { CountryStyled } from \"./TableComponets.Styled\";\nimport { ReactComponent as ArrowDown } from \"../../../../images/svg-icons/arrow-down.svg\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { patchRegionLead } from \"../../../../redux/Lead/lead-operation\";\nimport { useDispatch } from \"react-redux\";\nimport { UpdateLoading } from \"../../../CustomLoaders/CustomLoaders\";\n\n\n\nexport const Region = ({index, leads, lead, isAdmin, isManager, isConversion}) => {\n    const [isRegion, setRegion] = useState(false);\n    const [openRegion, setOpenRegion] = useState(new Map());\n    const [regionValue, setRegionValue] = useState('');\n    const [isRegionEnable, setRegionEnable] = useState(false);\n    const [updatingLeadId, setUpdatingLeadId] = useState(null);\n    const regionRefs = useRef(new Map());\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        if(lead.region && lead.region !== ''){\n            setRegion(true);\n        } else {\n            setRegion(false);\n        }\n    },[lead.region]);\n\n\n    const toggleRegionMenuDrop = (leadId) => {\n        setOpenRegion(prevState => {\n          const newMap = new Map(prevState);\n          newMap.set(leadId, !newMap.get(leadId));\n          return newMap;\n        });\n        setRegionValue('');\n        setRegionEnable(false);\n    };\n\n\n    const toggleRegionDropCont = (leadId, leads) => {\n        const totalLeads = leads.length;\n        if ((index > 15) && (index > totalLeads - 3)) {\n            return openRegion.get(leadId) ? 'input-form-visible-adjusted' : '';\n        } else {\n            return openRegion.get(leadId) ? 'input-form-visible' : '';\n        }\n    };\n\n\n    const toggleRegionDropArrow = (leadId) => {\n        return openRegion.get(leadId) ? 'arrow-icon-open' : '';\n    };\n\n\n    const handleKeyPress = useCallback(event => {\n        if (event.key === 'Escape') {\n            setOpenRegion(new Map());\n            setRegionValue('');\n            setRegionEnable(false);\n        }\n    },[]);\n\n\n    const handleBackgroundClick = useCallback(event => {\n        const newOpenMenus = new Map(openRegion);\n        let shouldUpdate = false;\n\n        regionRefs.current.forEach((ref, leadId) => {\n            if (ref && !ref.contains(event.target) && openRegion.get(leadId)) {\n                newOpenMenus.set(leadId, false);\n                shouldUpdate = true;\n            }\n        });\n\n        if (shouldUpdate) {\n            setOpenRegion(newOpenMenus);\n        }\n    }, [openRegion]);\n    \n    \n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress);\n        document.addEventListener('click', handleBackgroundClick);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n            document.removeEventListener('click', handleBackgroundClick);\n        };\n    }, [handleBackgroundClick, handleKeyPress]);\n\n\n    const onRegionValueChange = (e) => {\n        setRegionValue(e.target.value);\n        if((e.target.value.toLowerCase() !== lead.country.toLowerCase()) && (e.target.value !== '')){\n            setRegionEnable(true);\n        } else {\n            setRegionEnable(false);\n        }\n    };\n\n\n    const saveRegionValue = () => {\n        if (isAdmin || isManager || isConversion) {\n            const formattedRegionValue = regionValue\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n            .join(' ');\n\n            const dataRegionLead = {\n                id: lead._id,\n                leadRegion: formattedRegionValue\n            };\n            setUpdatingLeadId(lead._id);\n            dispatch(patchRegionLead(dataRegionLead)).finally(() => {\n                setUpdatingLeadId(null);\n            });\n            setRegionEnable(false);\n            setRegionValue('');\n            setOpenRegion(new Map());\n        }\n    };\n\n\n    return(\n        <CountryStyled ref={el => {\n            if (el) {\n                regionRefs.current.set(lead._id, el);\n            }}}\n            $isRegion={isRegion}\n        >\n            {updatingLeadId === lead._id ? (\n                <UpdateLoading/>\n            ) : (\n                <>\n                    <button className=\"data-btn\" type='button'\n                        onClick={() => toggleRegionMenuDrop(lead._id)}\n                    >\n                        {isRegion ? lead.region : 'Enter Region'}\n                    </button>\n                    <ArrowDown className={`arrow-icon ${toggleRegionDropArrow(lead._id, leads)}`}/>\n                    <form className={`input-form ${toggleRegionDropCont(lead._id, leads)}`} onSubmit={(e) => e.preventDefault()}>\n                        <label htmlFor=\"region\">\n                            <input type=\"text\"\n                                value={regionValue}\n                                onChange={onRegionValueChange}\n                                id='region'\n                                name=\"region\"\n                                placeholder=\"Enter Region\"\n                                required\n                            />\n                        </label>\n                        <button type=\"submit\" \n                            className=\"submit-button\"\n                            disabled={!isRegionEnable}\n                            onClick={saveRegionValue}\n                            >Save\n                        </button>\n                    </form>\n                </>\n            )}\n        </CountryStyled>\n    );\n};","import { CountryStyled } from \"./TableComponets.Styled\";\nimport { ReactComponent as ArrowDown } from \"../../../../images/svg-icons/arrow-down.svg\";\nimport { useState, useEffect, useRef, useCallback } from \"react\";\nimport { patchCityLead } from \"../../../../redux/Lead/lead-operation\";\nimport { useDispatch } from \"react-redux\";\nimport { UpdateLoading } from \"../../../CustomLoaders/CustomLoaders\";\n\n\n\nexport const City = ({index, leads, lead, isAdmin, isManager, isConversion}) => {\n    const [isCity, setCity] = useState(false);\n    const [openCity, setOpenCity] = useState(new Map());\n    const [cityValue, setCityValue] = useState('');\n    const [isCityEnable, setCityEnable] = useState(false);\n    const [updatingLeadId, setUpdatingLeadId] = useState(null);\n    const cityRefs = useRef(new Map());\n    const dispatch = useDispatch();\n\n\n    useEffect(() => {\n        if(lead.city && lead.city !== ''){\n            setCity(true);\n        } else {\n          setCity(false);\n        }\n    },[lead.city]);\n\n\n    const toggleCityMenuDrop = (leadId) => {\n        setOpenCity(prevState => {\n          const newMap = new Map(prevState);\n          newMap.set(leadId, !newMap.get(leadId));\n          return newMap;\n        });\n        setCityValue('');\n        setCityEnable(false);\n    };\n\n\n    const toggleCityDropCont = (leadId, leads) => {\n        const totalLeads = leads.length;\n        if ((index > 15) && (index > totalLeads - 3)) {\n            return openCity.get(leadId) ? 'input-form-visible-adjusted' : '';\n        } else {\n            return openCity.get(leadId) ? 'input-form-visible' : '';\n        }\n    };\n\n\n    const toggleCityDropArrow = (leadId) => {\n        return openCity.get(leadId) ? 'arrow-icon-open' : '';\n    };\n\n\n    const handleKeyPress = useCallback(event => {\n        if (event.key === 'Escape') {\n            setOpenCity(new Map());\n            setCityValue('');\n            setCityEnable(false);\n        }\n    },[]);\n\n\n    const handleBackgroundClick = useCallback(event => {\n        const newOpenMenus = new Map(openCity);\n        let shouldUpdate = false;\n\n        cityRefs.current.forEach((ref, leadId) => {\n            if (ref && !ref.contains(event.target) && openCity.get(leadId)) {\n                newOpenMenus.set(leadId, false);\n                shouldUpdate = true;\n            }\n        });\n\n        if (shouldUpdate) {\n            setOpenCity(newOpenMenus);\n        }\n    }, [openCity]);\n\n\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress);\n        document.addEventListener('click', handleBackgroundClick);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n            document.removeEventListener('click', handleBackgroundClick);\n        };\n    }, [handleBackgroundClick, handleKeyPress]);\n\n\n    const onCityValueChange = (e) => {\n        setCityValue(e.target.value);\n        if((e.target.value.toLowerCase() !== lead.country.toLowerCase()) && (e.target.value !== '')){\n            setCityEnable(true);\n        } else {\n            setCityEnable(false);\n        }\n    };\n\n\n    const saveCityValue = () => {\n        if (isAdmin || isManager || isConversion) {\n            const formattedCityValue = cityValue\n            .split(' ')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\n            .join(' ');\n\n            const dataCityLead = {\n                id: lead._id,\n                leadCity: formattedCityValue\n            }\n            setUpdatingLeadId(lead._id);\n            dispatch(patchCityLead(dataCityLead)).finally(() => {\n                setUpdatingLeadId(null);\n            });\n            setCityEnable(false);\n            setCityValue('');\n            setOpenCity(new Map());\n        }\n    };\n\n\n    return(\n        <CountryStyled ref={el => {\n            if (el) {\n                cityRefs.current.set(lead._id, el);\n            }}}\n            $isCity={isCity}\n        >\n            {updatingLeadId === lead._id ? (\n                <UpdateLoading/>\n            ) : (\n                <>\n                    <button className=\"data-btn\" type='button'\n                        onClick={() => toggleCityMenuDrop(lead._id)}\n                    >\n                        {isCity ? lead.city : 'Enter City'}\n                    </button>\n                    <ArrowDown className={`arrow-icon ${toggleCityDropArrow(lead._id, leads)}`}/>\n                    <form className={`input-form ${toggleCityDropCont(lead._id, leads)}`} onSubmit={(e) => e.preventDefault()}>\n                        <label htmlFor=\"city\">\n                            <input type=\"text\"\n                                value={cityValue}\n                                onChange={onCityValueChange}\n                                id='city'\n                                name=\"city\"\n                                placeholder=\"Enter City\"\n                                required\n                            />\n                        </label>\n                        <button type=\"submit\" \n                            className=\"submit-button\"\n                            disabled={!isCityEnable}\n                            onClick={saveCityValue}\n                            >Save\n                        </button>\n                    </form>\n                </>\n            )}\n        </CountryStyled>\n    );\n};","import { AssignReassignBlockStyled } from \"./TableComponets.Styled\";\nimport { ReactComponent as ArrowDown } from \"../../../../images/svg-icons/arrow-down.svg\";\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport { leadAssign, leadReAssign } from \"../../../../redux/Lead/lead-operation\";\nimport { useDispatch } from \"react-redux\";\nimport { UpdateLoading } from \"../../../CustomLoaders/CustomLoaders\";\n\n\n\nexport const ManagerAssignReAssignBlock = ({\n    availableUsersForAssign,\n    leads,\n    lead,\n    index,\n    isManager\n}) => {\n    const [conManager, setConManager] = useState(false);\n    const [isSelfCreated, setSelfCreated] = useState(false);\n    const [openManager, setOpenManager] = useState(new Map());\n    const [updatingLeadId, setUpdatingLeadId] = useState(null);\n    const managerRefs = useRef(new Map());\n    const dispatch = useDispatch();\n        \n\n    useEffect(() => {\n        const conManager = lead.conManagerId;\n        const selfCreated = lead.selfCreated;       \n        if(conManager && (conManager.name || conManager.email)){\n            setConManager(true);\n        } else {\n            setConManager(false);\n        }\n        if (selfCreated) {\n            setSelfCreated(true);\n        } else {\n            setSelfCreated(false)\n        }\n    },[lead.conManagerId, lead.selfCreated]);\n\n\n    const toggleManagerMenuDrop = (leadId) => {\n        setOpenManager(prevState => {\n          const newMap = new Map(prevState);\n          newMap.set(leadId, !newMap.get(leadId));\n          return newMap;\n        });\n    };\n\n\n    const toggleManagerDropCont = (leadId, leads) => {\n        const totalLeads = leads.length;\n        if (index > 14) {\n            if(index > totalLeads - 5){\n                return openManager.get(leadId) ? 'users-list-visible-adjusted' : '';\n            }\n        } else {\n            return openManager.get(leadId) ? 'users-list-visible' : '';\n        }\n    };\n\n\n    const toggleManagerDropArrow = (leadId) => {\n        return openManager.get(leadId) ? 'arrow-svg-open' : '';\n    };\n    \n    \n    const handleKeyPress = useCallback(event => {\n        if (event.key === 'Escape') {\n            setOpenManager(new Map());\n        }\n    },[]);\n\n\n    const handleBackgroundClick = useCallback(event => {\n        const newOpenMenus = new Map(openManager);\n        let shouldUpdate = false;\n\n        managerRefs.current.forEach((ref, leadId) => {\n            if (ref && !ref.contains(event.target) && openManager.get(leadId)) {\n                newOpenMenus.set(leadId, false);\n                shouldUpdate = true;\n            }\n        });\n\n        if (shouldUpdate) {\n            setOpenManager(newOpenMenus);\n        }\n    }, [openManager]);\n    \n    \n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress);\n        document.addEventListener('click', handleBackgroundClick);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n            document.removeEventListener('click', handleBackgroundClick);\n        };\n    }, [handleBackgroundClick, handleKeyPress]);\n\n\n    const renderUserList = (excludedId) => {\n        return availableUsersForAssign\n        .filter(user => user._id !== excludedId)\n        .map((user, index) => (\n            <li className=\"user-item\" key={index}>\n                <p className=\"drop-cont-text\"\n                    onClick={() => assignReAssignLead(user)}\n                >To: {user.username}\n                </p>\n            </li>\n        ))\n    };\n\n\n    const assignReAssignLead = (user) => {\n        if(isManager){\n            if (!isSelfCreated && !conManager) {\n                setUpdatingLeadId(lead._id);\n                dispatch(leadAssign({\n                    leadId: lead._id,\n                    data: {\n                        conManagerId: user._id\n                    }\n                })).finally(() => {\n                    setUpdatingLeadId(null);\n                });\n                setOpenManager(new Map());\n            }\n            if (!isSelfCreated && conManager) {\n                setUpdatingLeadId(lead._id);\n                dispatch(leadReAssign({\n                    leadId: lead._id,\n                    data: {\n                        conManagerId: user._id\n                    }\n                })).finally(() => {\n                    setUpdatingLeadId(null);\n                });\n                setOpenManager(new Map());\n            }\n        } \n    };\n\n\n    return(\n        <AssignReassignBlockStyled ref={el => {\n            if (el) {\n                managerRefs.current.set(lead._id, el);\n            }\n            }}\n            $isSelfCreated={isSelfCreated}\n        >\n            {updatingLeadId === lead._id ? (\n                <UpdateLoading/>\n            ) : (\n                <>\n                    <button className=\"manager-btn\" type='button'\n                        onClick={() => toggleManagerMenuDrop(lead._id)}\n                    >\n                        {isSelfCreated ? \"N/A\" \n                            : !lead.conManagerId \n                            ? 'Not Assigned Yet' \n                            : lead.conManagerId.username\n                        }\n                    </button>\n                    {!isSelfCreated && (\n                        <ArrowDown className={`arrow-svg ${toggleManagerDropArrow(lead._id)}`}/>\n                    )}\n                    <ul className={`users-list ${toggleManagerDropCont(lead._id, leads)}`}>\n                        <li className=\"initial-item\">\n                            <p className=\"initial-drop-cont-text\">\n                                {!lead.conManagerId ? \"Assign\" : \"ReAssign\"}\n                            </p>\n                        </li>\n                        {!lead.conManagerId ? (\n                                renderUserList()\n                        ) : (\n                                renderUserList(lead.conManagerId._id)\n                            )\n                        }\n                    </ul>\n                </>\n            )}\n        </AssignReassignBlockStyled>\n    );\n};","import { AssignReassignBlockStyled } from \"./TableComponets.Styled\";\nimport { ReactComponent as ArrowDown } from \"../../../../images/svg-icons/arrow-down.svg\";\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport { leadAssign, leadReAssign } from \"../../../../redux/Lead/lead-operation\";\nimport { useDispatch } from \"react-redux\";\nimport { UpdateLoading } from \"../../../CustomLoaders/CustomLoaders\";\n\n\n\nexport const AgentAssignReAssignBlock = ({\n    availableUsersForAssign,\n    leads,\n    lead,\n    index,\n    isConversionManager\n}) => {\n    const [conAgent, setConAgent] = useState(false);\n    const [isSelfCreated, setSelfCreated] = useState(false);\n    const [openAgent, setOpenAgent] = useState(new Map());\n    const [updatingLeadId, setUpdatingLeadId] = useState(null);\n    const agentRefs = useRef(new Map());\n    const dispatch = useDispatch();\n        \n\n    useEffect(() => {\n        const conAgent = lead.conAgentId;\n        const selfCreated = lead.selfCreated;       \n        if(conAgent && (conAgent.name || conAgent.email)){\n            setConAgent(true);\n        } else {\n            setConAgent(false);\n        }\n        if (selfCreated) {\n            setSelfCreated(true);\n        } else {\n            setSelfCreated(false)\n        }\n    },[lead.conAgentId, lead.selfCreated]);\n\n\n    const toggleAgentMenuDrop = (leadId) => {\n        setOpenAgent(prevState => {\n          const newMap = new Map(prevState);\n          newMap.set(leadId, !newMap.get(leadId));\n          return newMap;\n        });\n    };\n\n\n    const toggleAgentDropCont = (leadId, leads) => {\n        const totalLeads = leads.length;\n        if (index > 14) {\n            if(index > totalLeads - 5){\n                return openAgent.get(leadId) ? 'users-list-visible-adjusted' : '';\n            }\n        } else {\n            return openAgent.get(leadId) ? 'users-list-visible' : '';\n        }\n    };\n\n\n    const toggleAgentDropArrow = (leadId) => {\n        return openAgent.get(leadId) ? 'arrow-svg-open' : '';\n    };\n    \n    \n    const handleKeyPress = useCallback(event => {\n        if (event.key === 'Escape') {\n            setOpenAgent(new Map());\n        }\n    },[]);\n\n\n    const handleBackgroundClick = useCallback(event => {\n        const newOpenMenus = new Map(openAgent);\n        let shouldUpdate = false;\n\n        agentRefs.current.forEach((ref, leadId) => {\n            if (ref && !ref.contains(event.target) && openAgent.get(leadId)) {\n                newOpenMenus.set(leadId, false);\n                shouldUpdate = true;\n            }\n        });\n\n        if (shouldUpdate) {\n            setOpenAgent(newOpenMenus);\n        }\n    }, [openAgent]);\n    \n    \n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyPress);\n        document.addEventListener('click', handleBackgroundClick);\n\n        return () => {\n            document.removeEventListener('keydown', handleKeyPress);\n            document.removeEventListener('click', handleBackgroundClick);\n        };\n    }, [handleBackgroundClick, handleKeyPress]);\n\n\n    const renderUserList = (excludedId) => {\n        return availableUsersForAssign\n        .filter(user => user._id !== excludedId)\n        .map((user, index) => (\n            <li className=\"user-item\" key={index}>\n                <p className=\"drop-cont-text\"\n                    onClick={() => assignReAssignLead(user)}\n                >To: {user.username}\n                </p>\n            </li>\n        ))\n    };\n\n\n    \n    const assignReAssignLead = (user) => {\n        if (isConversionManager){\n            if (!isSelfCreated && !conAgent) {\n                setUpdatingLeadId(lead._id);\n                dispatch(leadAssign({\n                    leadId: lead._id,\n                    data: {\n                        conAgentId: user._id\n                    }\n                })).finally(() => {\n                    setUpdatingLeadId(null);\n                });\n                setOpenAgent(new Map());\n            }\n            if (!isSelfCreated && conAgent) {\n                setUpdatingLeadId(lead._id);\n                dispatch(leadReAssign({\n                    leadId: lead._id,\n                    data: {\n                        conAgentId: user._id\n                    }\n                })).finally(() => {\n                    setUpdatingLeadId(null);\n                });\n                setOpenAgent(new Map());\n            }\n        }\n    };\n\n\n    return(\n        <AssignReassignBlockStyled ref={el => {\n            if (el) {\n                agentRefs.current.set(lead._id, el);\n            }\n            }}\n            $isSelfCreated={isSelfCreated}\n            $isConversionManager={isConversionManager}\n        >\n            {updatingLeadId === lead._id ? (\n                <UpdateLoading/>\n            ) : (\n                <>\n                    <button className=\"manager-btn\" type='button'\n                        onClick={() => toggleAgentMenuDrop(lead._id)}\n                    >\n                        {isSelfCreated ? \"N/A\" \n                            : !lead.conAgentId \n                            ? 'Not Assigned Yet' \n                            : lead.conAgentId.username\n                        }\n                    </button>\n                    {!isSelfCreated && (\n                        <ArrowDown className={`arrow-svg ${toggleAgentDropArrow(lead._id)}`}/>\n                    )}\n                    <ul className={`users-list ${toggleAgentDropCont(lead._id, leads)}`}>\n                        <li className=\"initial-item\">\n                            <p className=\"initial-drop-cont-text\">\n                                {!lead.conAgentId ? \"Assign\" : \"ReAssign\"}\n                            </p>\n                        </li>\n                        {!lead.conAgentId ? (\n                                renderUserList()\n                        ) : (\n                                renderUserList(lead.conAgentId._id)\n                            )\n                        }\n                    </ul>\n                </>\n            )}\n        </AssignReassignBlockStyled>\n    );\n};","import { CustomCheckboxStyled } from \"../tableLeads.styled\";\nimport { ReactComponent as CheckedIcon } from \"../../../../images/svg-icons/check.svg\";\nimport { ReactComponent as CheckBoxIcon } from \"../../../../images/svg-icons/rectangle.svg\";\nimport { toggleOfficeLeadsCheckboxState } from \"../../../../redux/Lead/lead-slice\";\nimport { useDispatch } from \"react-redux\";\nimport React from \"react\";\n\n\n\n\nexport const CustomAssignLeadCheckbox = React.memo(({selectedOfficeLeadsCheckedCheckbox, lead}) => {\n    const dispatch = useDispatch();\n\n\n    const handleCheckboxChange = (_id) => {\n        dispatch(toggleOfficeLeadsCheckboxState({_id}));\n    };\n\n\n    return(\n        <CustomCheckboxStyled>\n            <div className=\"custom-checkbox\">\n                <input\n                    className=\"checkbox\"\n                    type=\"checkbox\"\n                    name=\"delete_external_lead\"\n                    id={lead._id}\n                    checked={selectedOfficeLeadsCheckedCheckbox.includes(lead._id)}\n                    onChange={() => handleCheckboxChange(lead._id)}\n                />\n                <div className=\"custom-checkbox\">\n                    <CheckBoxIcon className=\"custom-checkbox-before\" width=\"16\" height=\"16\"/>\n                    <CheckedIcon className=\"custom-checkbox-after\" width=\"16\" height=\"16\"/>\n                </div>\n            </div>\n        </CustomCheckboxStyled>\n    );\n});","import { TableListStyled } from \"./tableLeads.styled\";\nimport { ClientTime } from \"./TableComponents/clientTime.jsx\";\nimport { NextCall } from \"./TableComponents/nextCall.jsx\";\nimport { Status } from \"./TableComponents/Status.jsx\";\nimport { TimeZone } from \"./TableComponents/TimeZone.jsx\";\nimport { Country } from \"./TableComponents/Country.jsx\";\nimport { Region } from \"./TableComponents/Region.jsx\";\nimport { City } from \"./TableComponents/City.jsx\";\nimport { ManagerAssignReAssignBlock } from \"./TableComponents/ManagerAssignReassign.jsx\";\nimport { AgentAssignReAssignBlock } from \"./TableComponents/AgentAssignReAssignBlock.jsx\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useLead } from \"../../../hooks/useLead.js\";\nimport { useUser } from \"../../../hooks/useUser.js\";\nimport { useAuth } from \"../../../hooks/useAuth.js\";\nimport { openModalLeadDetail } from \"../../../redux/Modal/modal-slice.js\";\nimport { CustomAssignLeadCheckbox } from \"./TableComponents/CustomAssignLeadCheckbox.jsx\";\nimport { getLeadById } from \"../../../redux/Lead/lead-operation.js\";\nimport { setLeadDetailsModalTrue } from \"../../../redux/Lead/lead-slice.js\";\nimport { ShowRules } from \"../../../utils/showRules.js\";\n\n\n\nexport const TableLeads = () => {\n  const { \n    isLeads, \n    selectedOfficeLeadsCheckedCheckbox, \n    leadOffice, \n    status, \n    timeZone,\n  } = useLead();\n  const { formatDateTime } = ShowRules();\n  const {isAdmin, isConversion, isManager, isConversionManager, isLoggedIn} = useAuth();\n  const { userLeads, userLeadsComponent, availableUsersForAssign } = useUser();\n  const [leads, setLeads] = useState();\n  const dispatch = useDispatch();\n\n   \n  useEffect(() => {\n    if (userLeadsComponent && userLeads) {\n      setLeads(userLeads)\n    } else if(isLeads){\n      setLeads(isLeads)\n    }\n  }, [isLeads, userLeads, userLeadsComponent]);\n  \n  \n  const openOfficeLeadDetail = (_id) => {\n    dispatch(openModalLeadDetail());\n    dispatch(setLeadDetailsModalTrue(\"Office\"));\n    if (isLoggedIn && isAdmin) {\n      dispatch(\n        getLeadById({\n          leadId: _id,\n          branch: leadOffice,\n        })\n      );\n    } else if (isLoggedIn && (isConversion || isManager)) {\n      dispatch(getLeadById({ leadId: _id }));\n    }\n  };\n\n\n  // For style 'small-table' - check styles on OfficeLeads.styled.js\n  const chnageTableStyle = () => {\n    if(leads){\n      return leads.length < 16 ? 'small-table' : '';\n    }\n  };\n\n\n  let filteredLeads;\n  if (leads) {\n    filteredLeads = [...leads].sort((a, b) => {\n      if (a.status === \"New\" && b.status !== \"New\") {\n        return -1;\n      } \n      if (a.status !== \"New\" && b.status === \"New\") {\n        return 1;\n      }\n      return new Date(b.updatedAt) - new Date(a.updatedAt);\n    });\n  }\n  \n\n  return (\n    <TableListStyled className={chnageTableStyle()} $userLeadsComponent={userLeadsComponent}>\n      <table className=\"Table\">\n        <thead className=\"TableHeader\">\n          <tr className=\"TableHeaderList\">\n            <th className=\"TableHeaderItem\">Client Id</th>\n            <th className=\"TableHeaderItem\">Name</th>\n            <th className=\"TableHeaderItem\">Last Name</th>\n            <th className=\"TableHeaderItem\">Email</th>\n            <th className=\"TableHeaderItem\">Phone</th>\n            <th className=\"TableHeaderItem\">Status</th>\n            <th className=\"TableHeaderItem\">Source</th>\n            <th className=\"TableHeaderItem\">Country</th>\n            <th className=\"TableHeaderItem\">Region</th>\n            <th className=\"TableHeaderItem\">City</th>\n            <th className=\"TableHeaderItem\">Time Zone</th>\n            <th className=\"TableHeaderItem\">Client Time</th>\n            <th className=\"TableHeaderItem\">Self created</th>\n            <th className=\"TableHeaderItem\">Last update</th>\n            <th className=\"TableHeaderItem\">Created At</th>\n            {(!userLeadsComponent && (isAdmin || isManager)) && (\n              isManager ? (\n                <th className=\"TableHeaderItem\">Assign / Reassign Manager</th>\n              ) : (\n                <th className=\"TableHeaderItem\">Assigned Manager</th>\n              )\n            )}\n            {(!userLeadsComponent && (isAdmin || isManager || isConversionManager)) && (\n              isConversionManager ? (\n                <th className=\"TableHeaderItem\">Assign / Reassign Agent</th>\n              ) : (\n                <th className=\"TableHeaderItem\">Assigned Agent</th>\n              )\n              )}\n            <th className=\"TableHeaderItem\">Next call</th>\n            <th className=\"TableHeaderItem\">Details</th>\n            {isAdmin && (\n              <th className=\"TableHeaderItem\">Check</th>\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {leads && filteredLeads.map((lead, index) => (\n            <tr className={lead.status === 'New' ? 'back-color' : ''} key={lead._id}>\n              <td className=\"TableHeaderItem\">{lead.clientId}</td>\n              <td className=\"TableHeaderItem\">{lead.name}</td>\n              <td className=\"TableHeaderItem\">{lead.lastName}</td>\n              <td className=\"TableHeaderItem\">{lead.email}</td>\n              <td className=\"TableHeaderItem\">{lead.phone}</td>\n              <td className=\"TableHeaderItem\">\n                <Status\n                  leads={leads}\n                  lead={lead}\n                  index={index}\n                  status={status}\n                  isAdmin={isAdmin}\n                  isConversion={isConversion}\n                  isManager={isManager}\n                />\n              </td>\n              <td className=\"TableHeaderItem\">{lead.resource}</td>\n              <td id=\"countryColumn\" className=\"TableHeaderItem\">\n                <Country\n                  leads={leads}\n                  lead={lead}\n                  index={index}\n                  isAdmin={isAdmin}\n                  isConversion={isConversion}\n                  isManager={isManager}\n                />\n              </td>\n              <td id=\"regionColumn\" className=\"TableHeaderItem\">\n                <Region\n                  leads={leads}\n                  lead={lead}\n                  index={index}\n                  isAdmin={isAdmin}\n                  isConversion={isConversion}\n                  isManager={isManager}\n                />\n              </td>\n              <td id=\"cityColumn\" className=\"TableHeaderItem\">\n                <City\n                  leads={leads}\n                  lead={lead}\n                  index={index}\n                  isAdmin={isAdmin}\n                  isConversion={isConversion}\n                  isManager={isManager}\n                />\n              </td>\n              <td className=\"TableHeaderItem\">\n                <TimeZone\n                  leads={leads}\n                  lead={lead}\n                  index={index}\n                  timeZone={timeZone}\n                  isAdmin={isAdmin}\n                  isConversion={isConversion}\n                  isManager={isManager}\n                />\n              </td>\n              <td className=\"TableHeaderItem\" style={{ maxWidth: \"60px\", textWrap: \"unset\"}}>\n                <ClientTime lead={lead} />\n              </td>\n              <td className=\"TableHeaderItem\">\n                {lead.selfCreated ? \"Yes\" : \"No\"}\n              </td>\n              <td className=\"TableHeaderItem\">\n                {lead.updatedAt && formatDateTime(lead.updatedAt)}\n              </td>\n              <td className=\"TableHeaderItem\">\n                {lead.createdAt && formatDateTime(lead.createdAt)}\n              </td>\n              {(!userLeadsComponent && (isAdmin || isManager)) &&\n                <td id=\"mangerColumn\" className=\"TableHeaderItem\"\n                  style={{ background: lead.selfCreated \n                    ? \"transparent\" \n                    : !lead.conManagerId \n                    && \"#ff000082\" \n                  }}\n                >\n                  {!isManager ? (\n                    lead.selfCreated ? (\"N/A\") : (\n                      lead.conManagerId ? (\n                        lead.conManagerId.username\n                      ) : (\n                        'Not Assigned Yet'\n                      )\n                    )\n                  ) : (\n                    <ManagerAssignReAssignBlock\n                      availableUsersForAssign={availableUsersForAssign}\n                      leads={leads}\n                      lead={lead}\n                      index={index}\n                      isManager={isManager}\n                    />\n                  )}\n                </td>\n              }\n              {(!userLeadsComponent && (isAdmin || isManager || isConversionManager)) && (\n                <td id=\"agentColumn\" className=\"TableHeaderItem\"\n                  style={{ background: lead.selfCreated \n                    ? \"transparent\" \n                    : !lead.conAgentId \n                    && \"#ff000082\"\n                  }}\n                >\n                  {!isConversionManager ? (\n                    lead.selfCreated ? ('N/A') : (\n                      lead.conAgentId ? (\n                        lead.conAgentId.username\n                      ) : (\n                        'Not Assigned Yet'\n                      )\n                    )\n                  ) : (\n                    <AgentAssignReAssignBlock\n                      availableUsersForAssign={availableUsersForAssign}\n                      leads={leads}\n                      lead={lead}\n                      index={index}\n                      isConversionManager={isConversionManager}\n                    />\n                  )}\n                </td>\n              )}\n              <NextCall lead={lead} />\n              <td className=\"TableHeaderItem\">\n                <button className=\"check-btn\" type='button'\n                  onClick={() => openOfficeLeadDetail(lead._id, lead.branch)}\n                >Open\n                </button>\n              </td>\n              {isAdmin && (\n                <td className=\"TableHeaderItem\">\n                  <CustomAssignLeadCheckbox\n                    lead={lead}\n                    selectedOfficeLeadsCheckedCheckbox={selectedOfficeLeadsCheckedCheckbox}\n                  />\n                </td>\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>    \n    </TableListStyled>\n  );\n};\n","import { StyledOfficeLeads } from \"./OfficeLeads.styled\";\nimport {ReactComponent as ArrowSVG} from \"../../images/svg-icons/arrow-left.svg\";\nimport {ReactComponent as NothingFoundIcon} from \"../../images/svg-icons/No_results_1.svg\";\nimport { NavLink } from \"react-router-dom\";\nimport { resetOfficeLeadState } from \"../../redux/Lead/lead-slice\";\nimport { resetAllStates } from \"../../redux/Filter/filter-slice\";\nimport { resetUserLeadsComponent } from \"../../redux/User/user-slice\";\nimport { useDispatch } from \"react-redux\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { useUser } from \"../../hooks/useUser\";\nimport { useLead } from \"../../hooks/useLead\";\nimport { TableLeads } from \"../table/tableLeads/tableLeads\";\nimport { Pagination } from \"../Pagination/Pagination\";\nimport { RotatingLoader } from \"../CustomLoaders/CustomLoaders\";\nimport { useModal } from \"../../hooks/useModal\";\nimport { ShowRules } from \"../../utils/showRules\";\nimport { FilterBlock } from \"../FilterBlock/FilterBlock\";\nimport { useEffect, useState } from \"react\";\n\n\n\nexport const OfficeLeads = () => {\n    const { formatOfficeName } = ShowRules();\n    const { isAdmin } = useAuth();\n    const { isLeadLoading, leadOffice, isLeads, isLeadsError } = useLead();\n    const { isLeadDetails } = useModal();\n    const { userLeadsComponent } = useUser();\n    const [ leadLength, setLeadLength ] = useState(false);\n    const dispatch = useDispatch();\n\n    \n    useEffect(() => {\n        if (isLeads.length > 0) {\n            setLeadLength(true);\n        }\n    },[isLeads.length, setLeadLength])\n    \n\n    const resetStateForLeads = () => {\n        if (leadOffice) {\n            dispatch(resetOfficeLeadState());\n            dispatch(resetAllStates());\n        }\n        if (userLeadsComponent) {\n            dispatch(resetUserLeadsComponent());\n        }\n    };\n\n\n    return(\n        <StyledOfficeLeads $isAdmin={isAdmin}>\n            <div className=\"wraper\">\n                <div className=\"nav-block\">\n                    {isAdmin ? (\n                        <>\n                            <NavLink className=\"link\" to='/' onClick={resetStateForLeads}>\n                                <ArrowSVG className=\"svg\"/>\n                                <h1 className=\"titles\">Back</h1>\n                            </NavLink>\n                            <h2 className=\"titles\">{formatOfficeName(leadOffice)} Leads List & Management</h2>\n                        </>\n                    ) : (\n                        <h2 className=\"titles\">All Office Leads List & Management</h2>\n                    )}\n                </div>\n                <FilterBlock/>\n                <div className=\"content-container\">\n                    {(isLeadLoading && !isLeadDetails) ? (\n                        <RotatingLoader/>\n                    ) : (\n                        (!isLeadsError && (isLeads || leadLength)) ? (\n                            <TableLeads/>\n                        ) : (\n                            <NothingFoundIcon\n                                style={{margin: \"0 auto\"}} \n                            />\n                        ) \n                    )}\n                    <Pagination/>\n                </div>\n            </div>\n        </StyledOfficeLeads>\n    );\n};","import styled from \"styled-components\";\n\n\nexport const UserLeadsStyled = styled.div`\n    margin-top: 0.5rem;\n    margin-left: 0.5rem;\n    margin-right: 0.5rem;\n    border-radius: 0.75rem;\n    background-color: ${p => p.theme.color.background};\n    box-shadow: 4px 0px 14px 5px rgba(227, 255, 168, 0.2);\n    padding: 0.75rem;\n\n\n    .wraper{\n        width: 100%;\n        border: 1px solid ${p => p.theme.color.primary_green_lite};\n        border-radius: 0.75rem;\n        padding: 0.75rem;\n        height: 90.5dvh;\n\n        @media screen and (min-width: 834px) {\n            height: 87.5dvh;\n        }\n    }\n\n    .nav-block{\n        display: flex;\n        align-items: center;\n        margin-bottom: 1rem;\n        justify-content: space-between;\n        font-weight: 600;\n        font-size: 1.25rem;\n    }\n\n    .modal-button{\n        display: flex;\n        align-items: center;\n        background-color: transparent;\n        gap: 0.25rem;\n        font-weight: 600;\n        font-size: 1.25rem;\n        color: ${p => p.theme.color.primary_white};\n        transition: all ${p => p.theme.transition.main_transition};\n\n        .svg{\n            width: 1.5rem;\n            height: 1.5rem;\n            stroke: ${p => p.theme.color.primary_white};\n        }\n\n        &:hover{\n            color: ${p => p.theme.color.primary_green_lite};\n        }\n        &:hover .svg{\n            stroke: ${p => p.theme.color.primary_green_lite};\n        }\n    }\n\n\n    .link{\n        display: flex;\n        align-items: center;\n        gap: 0.25rem;\n        transition: all ${p => p.theme.transition.main_transition};\n        max-width: 30%;\n\n        .svg{\n            width: 1.5rem;\n            height: 1.5rem;\n            transform: rotate(180deg);\n            stroke: ${p => p.theme.color.primary_white};\n        }\n\n        &:hover{\n            color: ${p => p.theme.color.primary_green_lite};\n        }\n        &:hover .svg{\n            stroke: ${p => p.theme.color.primary_green_lite};\n        }\n    }\n\n    .titles{\n        font-weight: 700;\n        font-size: 1.5rem;\n        text-align: center;\n        margin-bottom: 2rem;\n    }\n\n\n    .small-table{\n        border-right: 1px solid ${p => p.theme.color.primary_green_lite};\n\n        & tbody{\n            & tr{\n                & td:last-child{\n                    border-right: none;\n                }\n            }\n\n            & tr:last-child{\n                & td{\n                    border-bottom: 1px solid ${p => p.theme.color.primary_green_lite};\n                }\n            }\n        }\n    }\n`","import { UserLeadsStyled } from \"./UserLeads.styled\";\nimport {ReactComponent as ArrowSVG} from \"../../images/svg-icons/arrow-left.svg\";\nimport { openModalUserDetail } from \"../../redux/Modal/modal-slice\";\nimport { resetUserLeadsComponent } from \"../../redux/User/user-slice\"\nimport { useDispatch } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { useUser } from \"../../hooks/useUser\";\nimport { TableLeads } from \"../table/tableLeads/tableLeads\";\nimport { RotatingLoader } from \"../CustomLoaders/CustomLoaders\";\n\n\n\nexport const UserLeads = () => {\n    const { userName, userLeadsComponentData, isUserLeadsLoading } = useUser();\n    const dispatch = useDispatch();  \n\n\n    const openUserModal = () => {\n        dispatch(openModalUserDetail())\n    };\n\n    const backToUsers = () => {\n        dispatch(resetUserLeadsComponent());\n    };\n\n     \n    return(\n        <UserLeadsStyled>\n            <div className=\"wraper\">\n                <div className=\"nav-block\">\n                    <button type='button' \n                        className=\"modal-button\" \n                        onClick={openUserModal}\n                    >\n                        <ArrowSVG className=\"svg\"/>\n                        Back to User Information\n                    </button>\n                    <NavLink className=\"link\" to='/users' onClick={backToUsers}>\n                        Back to Users\n                        <ArrowSVG className=\"svg\"/>\n                    </NavLink>\n                </div>\n                <h1 className=\"titles\">{userName} all {userLeadsComponentData} Leads details</h1>\n                {isUserLeadsLoading ? (\n                    <RotatingLoader/>\n                ) : (\n                    <TableLeads/>\n                )}\n            </div>\n        </UserLeadsStyled>\n    );\n};","import { OfficeLeads } from \"../components/OfficeLeads/OfficeLeads\";\nimport { UserLeads } from \"../components/OfficeLeads/UserLeads\";\nimport { useUser } from \"../hooks/useUser\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { useDispatch } from \"react-redux\";\nimport { useEffect } from \"react\";\nimport { getAvailableUsers } from \"../redux/User/user-operation\";\nimport { getStatus, getTimeZone } from \"../redux/Lead/lead-operation\";\n\n\n\nconst OfficeLeadsPage = () => {\n    const dispatch = useDispatch();\n    const { userLeadsComponent } = useUser();\n    const { isAdmin, isManager, isConversionManager, isConversion } = useAuth();\n\n\n    useEffect(() => {\n        if (!userLeadsComponent && (isAdmin || isManager || isConversion)) {\n            dispatch(getStatus());\n            dispatch(getTimeZone());\n        }\n        if (!userLeadsComponent && !isAdmin && (isManager || isConversionManager)) {\n            dispatch(getAvailableUsers());\n        }\n    },[dispatch, isAdmin, isConversion, isConversionManager, isManager, userLeadsComponent]);\n    \n\n\n    return(\n        <>\n            {userLeadsComponent ? (\n                <UserLeads/>\n            ) : (\n                <OfficeLeads/>\n            )}\n        </>\n    );\n};\n\n\nexport default OfficeLeadsPage;"],"names":["_g","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","SvgArrowLeft","_ref","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","ref","id","d","strokeMiterlimit","strokeLinecap","strokeLinejoin","ForwardRef","StyledOfficeLeads","styled","div","_templateObject","_taggedTemplateLiteral","p","theme","color","background","primary_green_lite","$isAdmin","transition","main_transition","primary_white","TableListStyled","$userLeadsComponent","primary_grey","background3","primary_black","CustomCheckboxStyled","_templateObject2","ClientTime","lead","currentTime","setCurrentTime","useState","Date","useEffect","intervalId","setInterval","clearInterval","_jsx","_Fragment","children","timeZoneOffset","currentUTCTime","getTime","getTimezoneOffset","toLocaleString","year","month","day","hour","minute","second","undefined","calculateClientTime","timeZone","NextCall","React","date","setDate","dateNow","useRef","dispatch","useDispatch","nextCallDate","useMemo","nextCall","isOverdue","current","timeLeft","isAlmostDue","isToday","toDateString","minDateOption","minTimeOption","toTimeString","slice","className","style","backgroundColor","Flatpickr","value","onChange","_ref2","options","dateFormat","minDate","minTime","weekNumbers","placeholder","onClose","submitNextCallDate","updatedDate","toISOString","patchNextCall","_id","leadNextcall","StatusesStyled","$isTimeZone","background2","CountryStyled","$isCountry","$isRegion","$isCity","AssignReassignBlockStyled","_templateObject3","$isSelfCreated","$isConversionManager","Status","index","leads","status","isAdmin","isManager","isConversion","isStatus","setStatus","openStatus","setOpenStatus","Map","updatingLeadId","setUpdatingLeadId","statusRefs","handleKeyPress","useCallback","event","handleBackgroundClick","newOpenMenus","shouldUpdate","forEach","leadId","contains","get","set","document","addEventListener","removeEventListener","el","UpdateLoading","_jsxs","type","onClick","toggleStatusMenuDrop","prevState","newMap","ArrowDown","concat","toggleStatusDropCont","totalLeads","map","newStatus","dataStatus","leadStatus","patchStatus","finally","submitStatus","TimeZone","isTimeZone","setTimeZone","openTimeZone","setOpenTimeZone","timeZoneRefs","toggleTimeZoneMenuDrop","toggleTimeZoneDropCont","zone","dataTimeZone","leadTimeZone","patchTimeZone","submitTimeZone","Country","isCountry","setCountry","openCountry","setOpenCountry","countryValue","setCountryValue","isCountryEnable","setCountryEnable","countryRefs","country","toggleCountryMenuDrop","toggleCountryDropCont","onSubmit","e","preventDefault","htmlFor","toLowerCase","name","required","disabled","saveCountryValue","formattedCountryValue","split","word","toUpperCase","charAt","join","dataCountryLead","leadCountry","patchCountryLead","Region","isRegion","setRegion","openRegion","setOpenRegion","regionValue","setRegionValue","isRegionEnable","setRegionEnable","regionRefs","region","toggleRegionMenuDrop","toggleRegionDropCont","saveRegionValue","formattedRegionValue","dataRegionLead","leadRegion","patchRegionLead","City","isCity","setCity","openCity","setOpenCity","cityValue","setCityValue","isCityEnable","setCityEnable","cityRefs","city","toggleCityMenuDrop","toggleCityDropCont","saveCityValue","formattedCityValue","dataCityLead","leadCity","patchCityLead","ManagerAssignReAssignBlock","availableUsersForAssign","conManager","setConManager","isSelfCreated","setSelfCreated","openManager","setOpenManager","managerRefs","conManagerId","selfCreated","email","renderUserList","excludedId","filter","user","assignReAssignLead","username","leadAssign","data","leadReAssign","toggleManagerMenuDrop","toggleManagerDropCont","AgentAssignReAssignBlock","isConversionManager","conAgent","setConAgent","openAgent","setOpenAgent","agentRefs","conAgentId","toggleAgentMenuDrop","toggleAgentDropCont","CustomAssignLeadCheckbox","selectedOfficeLeadsCheckedCheckbox","checked","includes","handleCheckboxChange","toggleOfficeLeadsCheckboxState","CheckBoxIcon","CheckedIcon","TableLeads","isLeads","leadOffice","useLead","formatDateTime","ShowRules","isLoggedIn","useAuth","userLeads","userLeadsComponent","useUser","setLeads","filteredLeads","sort","a","b","updatedAt","chnageTableStyle","clientId","lastName","phone","resource","maxWidth","textWrap","createdAt","openOfficeLeadDetail","branch","openModalLeadDetail","setLeadDetailsModalTrue","getLeadById","OfficeLeads","formatOfficeName","isLeadLoading","isLeadsError","isLeadDetails","useModal","leadLength","setLeadLength","NavLink","to","resetStateForLeads","resetOfficeLeadState","resetAllStates","resetUserLeadsComponent","ArrowSVG","FilterBlock","RotatingLoader","NothingFoundIcon","margin","Pagination","UserLeadsStyled","UserLeads","userName","userLeadsComponentData","isUserLeadsLoading","openUserModal","openModalUserDetail","backToUsers","OfficeLeadsPage","getStatus","getTimeZone","getAvailableUsers"],"sourceRoot":""}