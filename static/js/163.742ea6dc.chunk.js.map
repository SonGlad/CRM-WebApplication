{"version":3,"file":"static/js/163.742ea6dc.chunk.js","mappings":"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","sources":["../node_modules/date-fns-tz/dist/esm/_lib/tzTokenizeDate/index.js","../node_modules/date-fns-tz/dist/esm/_lib/newDateUTC/index.js","../node_modules/date-fns-tz/dist/esm/_lib/tzParseTimezone/index.js","../node_modules/date-fns-tz/dist/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","../node_modules/date-fns-tz/dist/esm/_lib/tzPattern/index.js","../node_modules/date-fns-tz/dist/esm/toDate/index.js","../node_modules/date-fns-tz/dist/esm/toZonedTime/index.js","../node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs","../node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","../node_modules/date-fns/locale/en-US/_lib/formatLong.mjs","../node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs","../node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","../node_modules/date-fns/locale/_lib/buildMatchFn.mjs","../node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs","../node_modules/date-fns/locale/en-US.mjs","../node_modules/date-fns/locale/en-US/_lib/localize.mjs","../node_modules/date-fns/locale/en-US/_lib/match.mjs","../node_modules/date-fns/_lib/defaultOptions.mjs","../node_modules/date-fns/constants.mjs","../node_modules/date-fns/toDate.mjs","../node_modules/date-fns/startOfDay.mjs","../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs","../node_modules/date-fns/differenceInCalendarDays.mjs","../node_modules/date-fns/constructFrom.mjs","../node_modules/date-fns/startOfYear.mjs","../node_modules/date-fns/getDayOfYear.mjs","../node_modules/date-fns/startOfWeek.mjs","../node_modules/date-fns/startOfISOWeek.mjs","../node_modules/date-fns/getISOWeekYear.mjs","../node_modules/date-fns/startOfISOWeekYear.mjs","../node_modules/date-fns/getISOWeek.mjs","../node_modules/date-fns/getWeekYear.mjs","../node_modules/date-fns/startOfWeekYear.mjs","../node_modules/date-fns/getWeek.mjs","../node_modules/date-fns/_lib/addLeadingZeros.mjs","../node_modules/date-fns/_lib/format/lightFormatters.mjs","../node_modules/date-fns/_lib/format/formatters.mjs","../node_modules/date-fns/_lib/format/longFormatters.mjs","../node_modules/date-fns/_lib/protectedTokens.mjs","../node_modules/date-fns/isDate.mjs","../node_modules/date-fns/isValid.mjs","../node_modules/date-fns/format.mjs"],"sourcesContent":["/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\nexport function tzTokenizeDate(date, timeZone) {\n    const dtf = getDateTimeFormat(timeZone);\n    return 'formatToParts' in dtf ? partsOffset(dtf, date) : hackyOffset(dtf, date);\n}\nconst typeToPos = {\n    year: 0,\n    month: 1,\n    day: 2,\n    hour: 3,\n    minute: 4,\n    second: 5,\n};\nfunction partsOffset(dtf, date) {\n    try {\n        const formatted = dtf.formatToParts(date);\n        const filled = [];\n        for (let i = 0; i < formatted.length; i++) {\n            const pos = typeToPos[formatted[i].type];\n            if (pos !== undefined) {\n                filled[pos] = parseInt(formatted[i].value, 10);\n            }\n        }\n        return filled;\n    }\n    catch (error) {\n        if (error instanceof RangeError) {\n            return [NaN];\n        }\n        throw error;\n    }\n}\nfunction hackyOffset(dtf, date) {\n    const formatted = dtf.format(date);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted);\n    // const [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n    // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n    return [\n        parseInt(parsed[3], 10),\n        parseInt(parsed[1], 10),\n        parseInt(parsed[2], 10),\n        parseInt(parsed[4], 10),\n        parseInt(parsed[5], 10),\n        parseInt(parsed[6], 10),\n    ];\n}\n// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\nconst dtfCache = {};\nfunction getDateTimeFormat(timeZone) {\n    if (!dtfCache[timeZone]) {\n        // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n        const testDateFormatted = new Intl.DateTimeFormat('en-US', {\n            hourCycle: 'h23',\n            timeZone: 'America/New_York',\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            hour: '2-digit',\n            minute: '2-digit',\n            second: '2-digit',\n        }).format(new Date('2014-06-25T04:00:00.123Z'));\n        const hourCycleSupported = testDateFormatted === '06/25/2014, 00:00:00' ||\n            testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';\n        dtfCache[timeZone] = hourCycleSupported\n            ? new Intl.DateTimeFormat('en-US', {\n                hourCycle: 'h23',\n                timeZone: timeZone,\n                year: 'numeric',\n                month: 'numeric',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            })\n            : new Intl.DateTimeFormat('en-US', {\n                hour12: false,\n                timeZone: timeZone,\n                year: 'numeric',\n                month: 'numeric',\n                day: '2-digit',\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n    }\n    return dtfCache[timeZone];\n}\n","/**\n * Use instead of `new Date(Date.UTC(...))` to support years below 100 which doesn't work\n * otherwise due to the nature of the\n * [`Date` constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date#interpretation_of_two-digit_years.\n *\n * For `Date.UTC(...)`, use `newDateUTC(...).getTime()`.\n */\nexport function newDateUTC(fullYear, month, day, hour, minute, second, millisecond) {\n    const utcDate = new Date(0);\n    utcDate.setUTCFullYear(fullYear, month, day);\n    utcDate.setUTCHours(hour, minute, second, millisecond);\n    return utcDate;\n}\n","import { tzTokenizeDate } from '../tzTokenizeDate/index.js';\nimport { newDateUTC } from '../newDateUTC/index.js';\nconst MILLISECONDS_IN_HOUR = 3600000;\nconst MILLISECONDS_IN_MINUTE = 60000;\nconst patterns = {\n    timezone: /([Z+-].*)$/,\n    timezoneZ: /^(Z)$/,\n    timezoneHH: /^([+-]\\d{2})$/,\n    timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/,\n};\n// Parse constious time zone offset formats to an offset in milliseconds\nexport function tzParseTimezone(timezoneString, date, isUtcDate) {\n    // Empty string\n    if (!timezoneString) {\n        return 0;\n    }\n    // Z\n    let token = patterns.timezoneZ.exec(timezoneString);\n    if (token) {\n        return 0;\n    }\n    let hours;\n    let absoluteOffset;\n    // ±hh\n    token = patterns.timezoneHH.exec(timezoneString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        if (!validateTimezone(hours)) {\n            return NaN;\n        }\n        return -(hours * MILLISECONDS_IN_HOUR);\n    }\n    // ±hh:mm or ±hhmm\n    token = patterns.timezoneHHMM.exec(timezoneString);\n    if (token) {\n        hours = parseInt(token[2], 10);\n        const minutes = parseInt(token[3], 10);\n        if (!validateTimezone(hours, minutes)) {\n            return NaN;\n        }\n        absoluteOffset = Math.abs(hours) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n        return token[1] === '+' ? -absoluteOffset : absoluteOffset;\n    }\n    // IANA time zone\n    if (isValidTimezoneIANAString(timezoneString)) {\n        date = new Date(date || Date.now());\n        const utcDate = isUtcDate ? date : toUtcDate(date);\n        const offset = calcOffset(utcDate, timezoneString);\n        const fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);\n        return -fixedOffset;\n    }\n    return NaN;\n}\nfunction toUtcDate(date) {\n    return newDateUTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n}\nfunction calcOffset(date, timezoneString) {\n    const tokens = tzTokenizeDate(date, timezoneString);\n    // ms dropped because it's not provided by tzTokenizeDate\n    const asUTC = newDateUTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5], 0).getTime();\n    let asTS = date.getTime();\n    const over = asTS % 1000;\n    asTS -= over >= 0 ? over : 1000 + over;\n    return asUTC - asTS;\n}\nfunction fixOffset(date, offset, timezoneString) {\n    const localTS = date.getTime();\n    // Our UTC time is just a guess because our offset is just a guess\n    let utcGuess = localTS - offset;\n    // Test whether the zone matches the offset for this ts\n    const o2 = calcOffset(new Date(utcGuess), timezoneString);\n    // If so, offset didn't change, and we're done\n    if (offset === o2) {\n        return offset;\n    }\n    // If not, change the ts by the difference in the offset\n    utcGuess -= o2 - offset;\n    // If that gives us the local time we want, we're done\n    const o3 = calcOffset(new Date(utcGuess), timezoneString);\n    if (o2 === o3) {\n        return o2;\n    }\n    // If it's different, we're in a hole time. The offset has changed, but we don't adjust the time\n    return Math.max(o2, o3);\n}\nfunction validateTimezone(hours, minutes) {\n    return -23 <= hours && hours <= 23 && (minutes == null || (0 <= minutes && minutes <= 59));\n}\nconst validIANATimezoneCache = {};\nfunction isValidTimezoneIANAString(timeZoneString) {\n    if (validIANATimezoneCache[timeZoneString])\n        return true;\n    try {\n        new Intl.DateTimeFormat(undefined, { timeZone: timeZoneString });\n        validIANATimezoneCache[timeZoneString] = true;\n        return true;\n    }\n    catch (error) {\n        return false;\n    }\n}\n","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n    const utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    utcDate.setUTCFullYear(date.getFullYear());\n    return +date - +utcDate;\n}\n","/** Regex to identify the presence of a time zone specifier in a date string */\nexport const tzPattern = /(Z|[+-]\\d{2}(?::?\\d{2})?| UTC| [a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?)$/;\n","import { getTimezoneOffsetInMilliseconds } from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { tzPattern } from '../_lib/tzPattern/index.js';\nconst MILLISECONDS_IN_HOUR = 3600000;\nconst MILLISECONDS_IN_MINUTE = 60000;\nconst DEFAULT_ADDITIONAL_DIGITS = 2;\nconst patterns = {\n    dateTimePattern: /^([0-9W+-]+)(T| )(.*)/,\n    datePattern: /^([0-9W+-]+)(.*)/,\n    plainTime: /:/,\n    // year tokens\n    YY: /^(\\d{2})$/,\n    YYY: [\n        /^([+-]\\d{2})$/, // 0 additional digits\n        /^([+-]\\d{3})$/, // 1 additional digit\n        /^([+-]\\d{4})$/, // 2 additional digits\n    ],\n    YYYY: /^(\\d{4})/,\n    YYYYY: [\n        /^([+-]\\d{4})/, // 0 additional digits\n        /^([+-]\\d{5})/, // 1 additional digit\n        /^([+-]\\d{6})/, // 2 additional digits\n    ],\n    // date tokens\n    MM: /^-(\\d{2})$/,\n    DDD: /^-?(\\d{3})$/,\n    MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n    Www: /^-?W(\\d{2})$/,\n    WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n    HH: /^(\\d{2}([.,]\\d*)?)$/,\n    HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n    HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n    // time zone tokens (to identify the presence of a tz)\n    timeZone: tzPattern,\n};\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param argument the value to convert\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {string} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n *\n * @returns the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * const result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * const result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport function toDate(argument, options = {}) {\n    if (arguments.length < 1) {\n        throw new TypeError('1 argument required, but only ' + arguments.length + ' present');\n    }\n    if (argument === null) {\n        return new Date(NaN);\n    }\n    const additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : Number(options.additionalDigits);\n    if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n        throw new RangeError('additionalDigits must be 0, 1 or 2');\n    }\n    // Clone the date\n    if (argument instanceof Date ||\n        (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')) {\n        // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n        return new Date(argument.getTime());\n    }\n    else if (typeof argument === 'number' ||\n        Object.prototype.toString.call(argument) === '[object Number]') {\n        return new Date(argument);\n    }\n    else if (!(Object.prototype.toString.call(argument) === '[object String]')) {\n        return new Date(NaN);\n    }\n    const dateStrings = splitDateString(argument);\n    const { year, restDateString } = parseYear(dateStrings.date, additionalDigits);\n    const date = parseDate(restDateString, year);\n    if (date === null || isNaN(date.getTime())) {\n        return new Date(NaN);\n    }\n    if (date) {\n        const timestamp = date.getTime();\n        let time = 0;\n        let offset;\n        if (dateStrings.time) {\n            time = parseTime(dateStrings.time);\n            if (time === null || isNaN(time)) {\n                return new Date(NaN);\n            }\n        }\n        if (dateStrings.timeZone || options.timeZone) {\n            offset = tzParseTimezone(dateStrings.timeZone || options.timeZone, new Date(timestamp + time));\n            if (isNaN(offset)) {\n                return new Date(NaN);\n            }\n        }\n        else {\n            // get offset accurate to hour in time zones that change offset\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));\n            offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));\n        }\n        return new Date(timestamp + time + offset);\n    }\n    else {\n        return new Date(NaN);\n    }\n}\nfunction splitDateString(dateString) {\n    const dateStrings = {};\n    let parts = patterns.dateTimePattern.exec(dateString);\n    let timeString;\n    if (!parts) {\n        parts = patterns.datePattern.exec(dateString);\n        if (parts) {\n            dateStrings.date = parts[1];\n            timeString = parts[2];\n        }\n        else {\n            dateStrings.date = null;\n            timeString = dateString;\n        }\n    }\n    else {\n        dateStrings.date = parts[1];\n        timeString = parts[3];\n    }\n    if (timeString) {\n        const token = patterns.timeZone.exec(timeString);\n        if (token) {\n            dateStrings.time = timeString.replace(token[1], '');\n            dateStrings.timeZone = token[1].trim();\n        }\n        else {\n            dateStrings.time = timeString;\n        }\n    }\n    return dateStrings;\n}\nfunction parseYear(dateString, additionalDigits) {\n    if (dateString) {\n        const patternYYY = patterns.YYY[additionalDigits];\n        const patternYYYYY = patterns.YYYYY[additionalDigits];\n        // YYYY or ±YYYYY\n        let token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);\n        if (token) {\n            const yearString = token[1];\n            return {\n                year: parseInt(yearString, 10),\n                restDateString: dateString.slice(yearString.length),\n            };\n        }\n        // YY or ±YYY\n        token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);\n        if (token) {\n            const centuryString = token[1];\n            return {\n                year: parseInt(centuryString, 10) * 100,\n                restDateString: dateString.slice(centuryString.length),\n            };\n        }\n    }\n    // Invalid ISO-formatted year\n    return {\n        year: null,\n    };\n}\nfunction parseDate(dateString, year) {\n    // Invalid ISO-formatted year\n    if (year === null) {\n        return null;\n    }\n    let date;\n    let month;\n    let week;\n    // YYYY\n    if (!dateString || !dateString.length) {\n        date = new Date(0);\n        date.setUTCFullYear(year);\n        return date;\n    }\n    // YYYY-MM\n    let token = patterns.MM.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        month = parseInt(token[1], 10) - 1;\n        if (!validateDate(year, month)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, month);\n        return date;\n    }\n    // YYYY-DDD or YYYYDDD\n    token = patterns.DDD.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        const dayOfYear = parseInt(token[1], 10);\n        if (!validateDayOfYearDate(year, dayOfYear)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, 0, dayOfYear);\n        return date;\n    }\n    // yyyy-MM-dd or YYYYMMDD\n    token = patterns.MMDD.exec(dateString);\n    if (token) {\n        date = new Date(0);\n        month = parseInt(token[1], 10) - 1;\n        const day = parseInt(token[2], 10);\n        if (!validateDate(year, month, day)) {\n            return new Date(NaN);\n        }\n        date.setUTCFullYear(year, month, day);\n        return date;\n    }\n    // YYYY-Www or YYYYWww\n    token = patterns.Www.exec(dateString);\n    if (token) {\n        week = parseInt(token[1], 10) - 1;\n        if (!validateWeekDate(week)) {\n            return new Date(NaN);\n        }\n        return dayOfISOWeekYear(year, week);\n    }\n    // YYYY-Www-D or YYYYWwwD\n    token = patterns.WwwD.exec(dateString);\n    if (token) {\n        week = parseInt(token[1], 10) - 1;\n        const dayOfWeek = parseInt(token[2], 10) - 1;\n        if (!validateWeekDate(week, dayOfWeek)) {\n            return new Date(NaN);\n        }\n        return dayOfISOWeekYear(year, week, dayOfWeek);\n    }\n    // Invalid ISO-formatted date\n    return null;\n}\nfunction parseTime(timeString) {\n    let hours;\n    let minutes;\n    // hh\n    let token = patterns.HH.exec(timeString);\n    if (token) {\n        hours = parseFloat(token[1].replace(',', '.'));\n        if (!validateTime(hours)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR;\n    }\n    // hh:mm or hhmm\n    token = patterns.HHMM.exec(timeString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        minutes = parseFloat(token[2].replace(',', '.'));\n        if (!validateTime(hours, minutes)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE;\n    }\n    // hh:mm:ss or hhmmss\n    token = patterns.HHMMSS.exec(timeString);\n    if (token) {\n        hours = parseInt(token[1], 10);\n        minutes = parseInt(token[2], 10);\n        const seconds = parseFloat(token[3].replace(',', '.'));\n        if (!validateTime(hours, minutes, seconds)) {\n            return NaN;\n        }\n        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n    }\n    // Invalid ISO-formatted time\n    return null;\n}\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n    week = week || 0;\n    day = day || 0;\n    const date = new Date(0);\n    date.setUTCFullYear(isoWeekYear, 0, 4);\n    const fourthOfJanuaryDay = date.getUTCDay() || 7;\n    const diff = week * 7 + day + 1 - fourthOfJanuaryDay;\n    date.setUTCDate(date.getUTCDate() + diff);\n    return date;\n}\n// Validation functions\nconst DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nconst DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction isLeapYearIndex(year) {\n    return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n}\nfunction validateDate(year, month, date) {\n    if (month < 0 || month > 11) {\n        return false;\n    }\n    if (date != null) {\n        if (date < 1) {\n            return false;\n        }\n        const isLeapYear = isLeapYearIndex(year);\n        if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n            return false;\n        }\n        if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction validateDayOfYearDate(year, dayOfYear) {\n    if (dayOfYear < 1) {\n        return false;\n    }\n    const isLeapYear = isLeapYearIndex(year);\n    if (isLeapYear && dayOfYear > 366) {\n        return false;\n    }\n    if (!isLeapYear && dayOfYear > 365) {\n        return false;\n    }\n    return true;\n}\nfunction validateWeekDate(week, day) {\n    if (week < 0 || week > 52) {\n        return false;\n    }\n    if (day != null && (day < 0 || day > 6)) {\n        return false;\n    }\n    return true;\n}\nfunction validateTime(hours, minutes, seconds) {\n    if (hours < 0 || hours >= 25) {\n        return false;\n    }\n    if (minutes != null && (minutes < 0 || minutes >= 60)) {\n        return false;\n    }\n    if (seconds != null && (seconds < 0 || seconds >= 60)) {\n        return false;\n    }\n    return true;\n}\n","import { tzParseTimezone } from '../_lib/tzParseTimezone/index.js';\nimport { toDate } from '../toDate/index.js';\n/**\n * @name toZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param date the date with the relevant UTC time\n * @param timeZone the time zone to get local time for, can be an offset or IANA time zone\n * @param options the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n *\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = toZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nexport function toZonedTime(date, timeZone, options) {\n    date = toDate(date, options);\n    const offsetMilliseconds = tzParseTimezone(timeZone, date, true);\n    const d = new Date(date.getTime() - offsetMilliseconds);\n    const resultDate = new Date(0);\n    resultDate.setFullYear(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate());\n    resultDate.setHours(d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds());\n    return resultDate;\n}\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n","import { toDate } from \"../toDate.mjs\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n","/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n","import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n","import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n","import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n","import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date) {\n  return startOfWeek(date, { weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n","import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date) {\n  const year = getISOWeekYear(date);\n  const fourthOfJanuary = constructFrom(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date) {\n  const _date = toDate(date);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n","import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n","import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n","export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n","import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n","import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n","const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n","const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n","/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n","import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n","import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n"],"names":["tzTokenizeDate","date","timeZone","dtf","dtfCache","testDateFormatted","Intl","DateTimeFormat","hourCycle","year","month","day","hour","minute","second","format","Date","hourCycleSupported","hour12","getDateTimeFormat","formatted","formatToParts","filled","i","length","pos","typeToPos","type","undefined","parseInt","value","error","RangeError","NaN","partsOffset","parsed","exec","hackyOffset","newDateUTC","fullYear","millisecond","utcDate","setUTCFullYear","setUTCHours","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_MINUTE","patterns","timezone","timezoneZ","timezoneHH","timezoneHHMM","tzParseTimezone","timezoneString","isUtcDate","hours","absoluteOffset","token","validateTimezone","minutes","Math","abs","timeZoneString","validIANATimezoneCache","isValidTimezoneIANAString","now","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","toUtcDate","offset","calcOffset","fixedOffset","localTS","getTime","utcGuess","o2","o3","max","fixOffset","tokens","asUTC","asTS","over","getTimezoneOffsetInMilliseconds","UTC","DEFAULT_ADDITIONAL_DIGITS","dateTimePattern","datePattern","plainTime","YY","YYY","YYYY","YYYYY","MM","DDD","MMDD","Www","WwwD","HH","HHMM","HHMMSS","toDate","argument","options","arguments","TypeError","additionalDigits","Number","Object","prototype","toString","call","dateStrings","dateString","timeString","parts","time","replace","trim","splitDateString","restDateString","patternYYY","patternYYYYY","yearString","slice","centuryString","parseYear","week","validateDate","dayOfYear","isLeapYear","isLeapYearIndex","validateDayOfYearDate","validateWeekDate","dayOfISOWeekYear","dayOfWeek","parseDate","isNaN","timestamp","parseFloat","validateTime","seconds","parseTime","isoWeekYear","diff","getUTCDay","setUTCDate","getUTCDate","DAYS_IN_MONTH","DAYS_IN_MONTH_LEAP_YEAR","toZonedTime","offsetMilliseconds","d","resultDate","setFullYear","getUTCFullYear","getUTCMonth","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","args","width","String","defaultWidth","formats","formatLong","full","long","medium","short","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","valuesArray","context","formattingValues","defaultFormattingWidth","values","argumentCallback","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","array","predicate","findIndex","pattern","test","object","hasOwnProperty","findKey","valueCallback","rest","enUS","code","formatDistance","count","result","tokenValue","addSuffix","comparison","formatRelative","_date","_baseDate","_options","localize","ordinalNumber","dirtyNumber","number","rem100","era","narrow","abbreviated","wide","quarter","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","parsePattern","parseResult","any","index","weekStartsOn","firstWeekContainsDate","defaultOptions","getDefaultOptions","pow","millisecondsInWeek","millisecondsInDay","argStr","constructor","startOfDay","differenceInCalendarDays","dateLeft","dateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","constructFrom","startOfYear","cleanDate","getDayOfYear","startOfWeek","_ref","_ref2","_ref3","_options$weekStartsOn","_options$locale","_defaultOptions$local","locale","getDay","setDate","startOfISOWeek","getISOWeekYear","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfISOWeekYear","fourthOfJanuary","getISOWeek","getWeekYear","_options$firstWeekCon","firstWeekOfNextYear","firstWeekOfThisYear","startOfWeekYear","firstWeek","getWeek","addLeadingZeros","targetLength","padStart","lightFormatters","y","signedYear","M","a","dayPeriodEnumValue","toUpperCase","h","H","m","s","S","numberOfDigits","milliseconds","trunc","dayPeriodEnum","formatters","G","unit","Y","signedWeekYear","weekYear","R","u","Q","ceil","q","L","w","I","isoWeek","D","E","e","localDayOfWeek","c","isoDayOfWeek","toLowerCase","b","B","K","k","X","_localize","timezoneOffset","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","T","delimiter","sign","absOffset","dateLongFormatter","timeLongFormatter","longFormatters","p","P","dateTimeLongFormatter","timePattern","dateTimeFormat","dayOfYearTokenRE","weekYearTokenRE","throwTokens","isDate","isValid","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","formatStr","_ref4","_options$locale2","_ref5","_ref6","_ref7","_options$locale3","_defaultOptions$local2","defaultLocale","originalDate","map","substring","firstCharacter","longFormatter","join","isToken","cleanEscapedString","preprocessor","formatterOptions","part","useAdditionalWeekYearTokens","isProtectedWeekYearToken","useAdditionalDayOfYearTokens","isProtectedDayOfYearToken","input","_message","subject","concat","message","console","warn","includes","warnOrThrowProtectedError","formatter","matched"],"sourceRoot":""}