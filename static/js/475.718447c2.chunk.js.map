{"version":3,"file":"static/js/475.718447c2.chunk.js","mappings":"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","sources":["components/OfficeLeads/OfficeLeads.styled.js","components/table/table.styled.js","components/table/table.jsx","components/OfficeLeads/OfficeLeads.jsx","pages/OfficeLeads.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\n\nexport const StyledOfficeLeads = styled.div`\n    margin-top: 0.5rem;\n    margin-left: 0.5rem;\n    margin-right: 0.5rem;\n    height: 90vh;\n    border-radius: 0.75rem;\n    background-color: ${p => p.theme.color.background};\n    box-shadow: 4px 0px 14px 5px rgba(227, 255, 168, 0.2);\n    padding: 0.75rem;\n\n\n    .wraper{\n        width: 100%;\n        border: 1px solid ${p => p.theme.color.primary_green_lite};\n        border-radius: 0.75rem;\n        padding: 0.75rem;\n        height: 87.5dvh;\n    }\n`","import styled from \"styled-components\";\n\nexport const TableList = styled.div`\n  border: 1px solid ${(p) => p.theme.color.primary_green_lite};\n  border-radius: 0.625rem;\n  width: 100%;\n\n  .Table {\n    border-collapse: collapse;\n    table-layout: fixed;\n    border-radius: 0.5rem;\n    overflow: hidden;\n  }\n\n  .TableHeader {\n    background: #e3ffa869;\n  }\n\n  .TableHeaderList th {\n    padding: 1rem 0.25rem 1rem 0.25rem;\n  }\n\n  td[id^=\"lastName-\"],\n  td[id^=\"email-\"],\n  td[id^=\"phone-\"],\n  td[id^=\"resourse-\"],\n  td[id^=\"country-\"],\n  td[id^=\"region-\"],\n  td[id^=\"city-\"] {\n    max-width: 70px;\n    max-height: 50px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    position: relative;\n  }\n\n  .TableHeaderItem {\n    padding:0.5rem 0.25rem;\n    border-bottom: 1px solid ${(p) => p.theme.color.primary_green_lite};\n    text-align: left;\n    font-weight: 500;\n    font-size: 0.5rem;\n    overflow-wrap: break-word;\n    text-align: center;\n    position: relative;\n  }\n\n  .TableHeaderItem:not(:last-child) {\n    border-right: 1px solid ${(p) => p.theme.color.primary_green_lite};\n  }\n\n  .WordList textarea,\n  select,\n  input {\n    cursor: pointer;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n    border: none;\n    background: none;\n    resize: none;\n    overflow: hidden;\n    text-align: center;\n    align-items: center;\n    display: flex;\n    color: ${(p) => p.theme.color.primary_white};\n    position: relative;\n\n    &:focus {\n      outline: none;\n      box-shadow: none;\n    }\n  }\n\n  .dropdown {\n    z-index: 1000;\n    position: absolute;\n    margin-top: 0.3125rem;\n    display: none;\n    gap: 0.5rem;\n    border-radius: 1rem;\n    padding: 0.75rem 0.5rem;\n    box-shadow: 0 0.25rem 3rem 0 rgba(18, 20, 23, 0.08);\n    background: ${(p) => p.theme.color.primary_green_lite};\n    color: black;\n  }\n\n  .ListItem {\n    cursor: pointer;\n\n    &:hover {\n      color: #a2a59e;\n    }\n  }\n\n\n  .arrow-svg {\n    width: 0.875rem;\n    height: 0.875rem;\n    stroke: ${(props) => props.theme.color.primary_green_lite};\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    position: absolute;\n    left: 5px;\n    bottom: 0px;\n  }\n\n  .arrow-svg-close {\n    transform: rotate(180deg);\n  }\n\n  .InputContainer {\n    display: flex;\n    position: absolute;\n    background: #e3ffa8e0;\n    border-radius: 10px;\n    padding: 10px;\n    z-index: 9999;\n    width: max-content;\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  }\n\n  .InputContainer input {\n    color: black;\n  }\n\n  .ButtonSave {\n    border-radius: 5px;\n    background: black;\n    color: white;\n    border: none;\n  }\n`;\n","import { TableList } from \"./table.styled\";\nimport { useEffect, useState, useRef } from \"react\";\nimport leadsData from \"./leads.json\";\nimport statusData from \"./status.json\";\nimport timeZoneData from \"./timeZone.json\";\nimport { ReactComponent as ArrowDown } from \"../../images/svg-icons/arrow-down.svg\";\n\nexport function Table() {\n  const [leads, setLeads] = useState(leadsData);\n  // const [dropdownVisible, setDropdownVisible] = useState(null);\n  const [isMenuBox, setMenuBox] = useState(false);\n  const [inputVisible, setInputVisible] = useState({ row: null, cell: null });\n  const inputRef = useRef(null);\n\n  const handleInputChange = (event, leadIndex, fieldName) => {\n    const updatedLeads = [...leads];\n    const fieldParts = fieldName.split(\".\");\n    if (fieldParts.length === 2) {\n      updatedLeads[leadIndex][fieldParts[0]][fieldParts[1]] =\n        event.target.value;\n    } else {\n      updatedLeads[leadIndex][fieldName] = event.target.value;\n    }\n    setLeads(updatedLeads);\n  };\n\n  const adjustTextareaHeight = (textarea) => {\n    textarea.style.height = \"auto\";\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  };\n\n  const handleTextareaChange = (event) => {\n    adjustTextareaHeight(event.target);\n  };\n\n  useEffect(() => {\n    const textareas = document.querySelectorAll(\"textarea\");\n    textareas.forEach((textarea) => {\n      adjustTextareaHeight(textarea);\n    });\n  }, [leads]);\n\n  // const handleDropdownClick = (leadIndex) => {\n  //   setDropdownVisible(dropdownVisible === leadIndex ? null : leadIndex);\n  // };\n\n  const handleDropdownItemClick = (leadIndex, status) => {\n    const updatedLeads = [...leads];\n    updatedLeads[leadIndex].status = status;\n    setLeads(updatedLeads);\n    // setDropdownVisible(null); \n  };\n\n  const calculateClientTime = (timeZoneOffset) => {\n    const currentTime = new Date();\n    const clientTime = new Date(\n      currentTime.getTime() + timeZoneOffset * 60 * 60 * 1000\n    );\n    return clientTime.toLocaleString();\n  };\n\n  const toggleInputVisibility = (row, cell) => {\n    setMenuBox(isMenuBox === row ? null : row);\n    setInputVisible(\n      inputVisible.row === row && inputVisible.cell === cell\n        ? { row: null, cell: null }\n        : { row, cell }\n    );\n  };\n\n  const toggleUserMenuDropArrow = (row, cell) => {\n    return inputVisible.row === row && inputVisible.cell === cell\n      ? \"arrow-svg-close\"\n      : \"\";\n  };\n\n  useEffect(() => {\n    if (inputVisible.row !== null && inputVisible.cell !== null) {\n      const inputElement = document.getElementById(\n        `${inputVisible.cell}-${inputVisible.row}`\n      );\n      const inputContainer = inputRef.current;\n      if (inputElement && inputContainer) {\n        const rect = inputElement.getBoundingClientRect();\n        inputContainer.style.top = `${\n          rect.top + window.scrollY + rect.height\n        }px`;\n        inputContainer.style.left = `${rect.left + window.scrollX}px`;\n        // inputContainer.style.width = `${rect.width}px`;\n      }\n    }\n  }, [inputVisible]);\n\n  return (\n    <TableList>\n      <table className=\"Table\">\n        <thead className=\"TableHeader\">\n          <tr className=\"TableHeaderList\">\n            <th className=\"TableHeaderItem\">Client Id</th>\n            <th className=\"TableHeaderItem\">Name</th>\n            <th className=\"TableHeaderItem\">Last Name</th>\n            <th className=\"TableHeaderItem\">Email</th>\n            <th className=\"TableHeaderItem\">Phone</th>\n            <th className=\"TableHeaderItem\">Status</th>\n            <th className=\"TableHeaderItem\">Source</th>\n            <th className=\"TableHeaderItem\">Country</th>\n            <th className=\"TableHeaderItem\">Region</th>\n            <th className=\"TableHeaderItem\">City</th>\n            <th className=\"TableHeaderItem\">Time Zone</th>\n            <th className=\"TableHeaderItem\">Client Time</th>\n            <th className=\"TableHeaderItem\">Self created</th>\n            <th className=\"TableHeaderItem\">Last update</th>\n            <th className=\"TableHeaderItem\">Created At</th>\n            <th className=\"TableHeaderItem\">Agent</th>\n            <th className=\"TableHeaderItem\">Next call</th>\n          </tr>\n        </thead>\n        <tbody>\n          {leads &&\n            leads.map((lead, index) => (\n              <tr className=\"WordList\" key={lead._id}>\n                <td className=\"TableHeaderItem\">{lead.clientId}</td>\n                <td className=\"TableHeaderItem\">{lead.name}</td>\n                <td className=\"TableHeaderItem\" id={`lastName-${index}`}>\n                  {lead.lastName}\n                  <ArrowDown\n                    onClick={() => toggleInputVisibility(index, \"lastName\")}\n                    className={`arrow-svg ${toggleUserMenuDropArrow(\n                      index,\n                      \"lastName\"\n                    )}`}\n                  />\n                </td>\n                <td className=\"TableHeaderItem\" id={`email-${index}`}>\n                  {lead.email}\n                  <ArrowDown\n                    onClick={() => toggleInputVisibility(index, \"email\")}\n                    className={`arrow-svg ${toggleUserMenuDropArrow(\n                      index,\n                      \"email\"\n                    )}`}\n                  />\n                </td>\n                <td className=\"TableHeaderItem\" id={`phone-${index}`}>\n                  {lead.phone}\n                  <ArrowDown\n                    onClick={() => toggleInputVisibility(index, \"phone\")}\n                    className={`arrow-svg ${toggleUserMenuDropArrow(\n                      index,\n                      \"phone\"\n                    )}`}\n                  />\n                </td>\n                {/* <td\n                  className=\"TableHeaderItem custom-input\"\n                  onClick={() => handleDropdownClick(index)}\n                >\n                  <input\n                    id=\"statistics\"\n                    name=\"statistics\"\n                    className=\"Input\"\n                    type=\"text\"\n                    placeholder=\"Categories\"\n                    value={lead.status}\n                    readOnly\n                  />\n                  <ul\n                    className=\"dropdown\"\n                    style={{\n                      display: dropdownVisible === index ? \"grid\" : \"none\",\n                    }}\n                  >\n                    {statusData.map((statu, item) => (\n                      <li\n                        className=\"ListItem\"\n                        key={item}\n                        value={statu}\n                        onClick={() => handleDropdownItemClick(index, statu)}\n                      >\n                        {statu}\n                      </li>\n                    ))}\n                  </ul>\n                </td> */}\n                <td className=\"TableHeaderItem\" id={`status-${index}`}>\n                  {lead.status}\n                  <ArrowDown\n                    onClick={() => toggleInputVisibility(index, \"status\")}\n                    className={`arrow-svg ${toggleUserMenuDropArrow(\n                      index,\n                      \"status\"\n                    )}`}\n                  />\n                </td>\n                    \n                   <ul\n                    className=\"dropdown\"\n                    style={{\n                      display: inputVisible.cell === \"status\" ? \"grid\" : \"none\",\n                    }}\n                  >\n                  {inputVisible.row !== null && inputVisible.cell === \"status\" && \n                    statusData.map((statu, item) => (\n                      <li\n                        className=\"ListItem\"\n                        key={item}\n                        value={statu}\n                        onClick={() => handleDropdownItemClick(index, statu)}\n                      >\n                        {statu}\n                      </li>\n                    ))\n                  }\n                  </ul>\n                <td className=\"TableHeaderItem\" id={`resource-${index}`}>\n                  {lead.resource}\n                  <ArrowDown\n                    onClick={() => toggleInputVisibility(index, \"resource\")}\n                    className={`arrow-svg ${toggleUserMenuDropArrow(\n                      index,\n                      \"resource\"\n                    )}`}\n                  />\n                </td>\n                <td className=\"TableHeaderItem\" id={`country-${index}`}>\n                  {lead.country}\n                  <ArrowDown\n                    onClick={() => toggleInputVisibility(index, \"country\")}\n                    className={`arrow-svg ${toggleUserMenuDropArrow(\n                      index,\n                      \"country\"\n                    )}`}\n                  />\n                </td>\n                <td className=\"TableHeaderItem\" id={`region-${index}`}>\n                  {lead.region}\n                  <ArrowDown\n                    onClick={() => toggleInputVisibility(index, \"region\")}\n                    className={`arrow-svg ${toggleUserMenuDropArrow(\n                      index,\n                      \"region\"\n                    )}`}\n                  />\n                </td>\n                         <td className=\"TableHeaderItem\" id={`city-${index}`}>\n                  {lead.city}\n                  <ArrowDown\n                    onClick={() => toggleInputVisibility(index, \"city\")}\n                    className={`arrow-svg ${toggleUserMenuDropArrow(\n                      index,\n                      \"city\"\n                    )}`}\n                  />\n                </td>\n\n                <td className=\"TableHeaderItem\">\n                  <select\n                    value={lead.timeZone}\n                    onChange={(e) => handleInputChange(e, index, \"timeZone\")}\n                  >\n                    {timeZoneData.map((time, item) => (\n                      <option key={item} value={time}>\n                        {time}\n                      </option>\n                    ))}\n                  </select>\n                </td>\n                <td className=\"TableHeaderItem\">\n                  {calculateClientTime(lead.timeZone)}\n                </td>\n                <td className=\"TableHeaderItem\">\n                  {lead.selfCreated ? \"Yes\" : \"No\"}\n                </td>\n                <td className=\"TableHeaderItem\">\n                  {lead.latestComment.updatedAt.slice(0, 19).replace(\"T\", \" \")}\n                </td>\n                <td className=\"TableHeaderItem\">\n                  {lead.latestComment.createdAt.slice(0, 19).replace(\"T\", \" \")}\n                </td>\n                <td\n                  className=\"TableHeaderItem\"\n                  style={{ background: lead.assigned ? \"none\" : \"#ff000082\" }}\n                >\n                  {lead.conAgentId}\n                </td>\n                <td className=\"TableHeaderItem\">\n                  <label>\n                    <input\n                      type=\"datetime-local\"\n                      value={lead.latestComment.nextCall\n                        .toString()\n                        .slice(0, 16)}\n                      onChange={(e) =>\n                        handleInputChange(e, index, \"latestComment.nextCall\")\n                      }\n                      onInput={handleTextareaChange}\n                    />\n                  </label>\n                </td>\n              </tr>\n            ))}\n        </tbody>\n      </table>\n      {inputVisible.row !== null && inputVisible.cell !== null &&  inputVisible.cell !== \"status\" && (\n        <form className=\"InputContainer\" ref={inputRef}>\n          <input\n            value={leads[inputVisible.row][inputVisible.cell]}\n            onChange={(e) =>\n              handleInputChange(e, inputVisible.row, inputVisible.cell)\n            }\n            onInput={handleTextareaChange}\n          />\n          <button className=\"ButtonSave\" type=\"submit\">\n            Save\n          </button>\n        </form>\n      )}\n    </TableList>\n  );\n}\n","import { StyledOfficeLeads } from \"./OfficeLeads.styled\";\nimport { NavLink } from \"react-router-dom\";\nimport { resetOfficeState } from \"../../redux/Lead/lead-slice\";\nimport { useDispatch } from \"react-redux\";\nimport { useLead } from \"../../hooks/useLead\";\nimport { useAuth } from \"../../hooks/useAuth\";\nimport { Table } from \"../table/table\";\n\n\n\nexport const OfficeLeads = () => {\n    const { isAdmin } = useAuth();\n    const { leadOffice } = useLead(); \n    const dispatch = useDispatch();\n    console.log(leadOffice);\n\n\n    const resetStateForOffice = () => {\n        dispatch(resetOfficeState())\n    };\n\n\n    return(\n        <StyledOfficeLeads>\n            <div className=\"wraper\">\n                {isAdmin && (\n                    <NavLink to='/' onClick={resetStateForOffice}>\n                        <h1>Back</h1>\n                    </NavLink>\n                )}\n                <Table/>\n            </div>\n        </StyledOfficeLeads>\n    );\n};","import { OfficeLeads } from \"../components/OfficeLeads/OfficeLeads\";\n\n\nconst OfficeLeadsPage = () => {\n\n\n    return(\n        <>\n            <OfficeLeads/>\n        </>\n    );\n};\n\n\nexport default OfficeLeadsPage;"],"names":["StyledOfficeLeads","styled","div","_templateObject","_taggedTemplateLiteral","p","theme","color","background","primary_green_lite","TableList","primary_white","props","Table","leads","setLeads","useState","leadsData","isMenuBox","setMenuBox","inputVisible","setInputVisible","row","cell","inputRef","useRef","handleInputChange","event","leadIndex","fieldName","updatedLeads","fieldParts","split","length","target","value","adjustTextareaHeight","textarea","style","height","concat","scrollHeight","handleTextareaChange","useEffect","document","querySelectorAll","forEach","calculateClientTime","timeZoneOffset","currentTime","Date","getTime","toLocaleString","toggleInputVisibility","toggleUserMenuDropArrow","inputElement","getElementById","inputContainer","current","rect","getBoundingClientRect","top","window","scrollY","left","scrollX","_jsxs","children","className","_jsx","map","lead","index","clientId","name","id","lastName","ArrowDown","onClick","email","phone","status","display","statusData","statu","item","handleDropdownItemClick","resource","country","region","city","timeZone","onChange","e","timeZoneData","time","selfCreated","latestComment","updatedAt","slice","replace","createdAt","assigned","conAgentId","type","nextCall","toString","onInput","_id","ref","OfficeLeads","isAdmin","useAuth","leadOffice","useLead","dispatch","useDispatch","console","log","NavLink","to","resetStateForOffice","resetOfficeState","OfficeLeadsPage","_Fragment"],"sourceRoot":""}